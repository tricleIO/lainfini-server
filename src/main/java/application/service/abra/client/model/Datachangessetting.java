/**
 * ABRA Gen Web API (spojení testapi)
 * Webové API systému 17.03.03
 *
 * OpenAPI spec version: 17.03.03
 * Contact: abragen@abra.eu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package application.service.abra.client.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;

import java.util.Objects;


/**
 * Datachangessetting
 */
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2017-03-26T20:30:15.152+02:00")
public class Datachangessetting   {
  @SerializedName("DisplayName")
  private String displayName = null;

  @SerializedName("ID")
  private String ID = null;

  @SerializedName("ClassID")
  private String classID = null;

  @SerializedName("ObjVersion")
  private Integer objVersion = null;

  @SerializedName("CreatedBy_ID")
  private String createdByID = null;

  @SerializedName("CLSID")
  private String CLSID = null;

  @SerializedName("Status")
  private Integer status = null;

  @SerializedName("IsActive")
  private Boolean isActive = null;

  @SerializedName("CLSIDText")
  private String cLSIDText = null;

  @SerializedName("LogInsert")
  private Boolean logInsert = null;

  @SerializedName("LogUpdate")
  private Boolean logUpdate = null;

  @SerializedName("LogDelete")
  private Boolean logDelete = null;

   /**
   * Název
   * @return displayName
  **/
  @ApiModelProperty(example = "null", value = "Název")
  public String getDisplayName() {
    return displayName;
  }

   /**
   * Vlastní ID [persistentní položka]
   * @return ID
  **/
  @ApiModelProperty(example = "null", value = "Vlastní ID [persistentní položka]")
  public String getID() {
    return ID;
  }

   /**
   * ID třídy
   * @return classID
  **/
  @ApiModelProperty(example = "null", value = "ID třídy")
  public String getClassID() {
    return classID;
  }

   /**
   * Verze objektu [persistentní položka]
   * @return objVersion
  **/
  @ApiModelProperty(example = "null", value = "Verze objektu [persistentní položka]")
  public Integer getObjVersion() {
    return objVersion;
  }

   /**
   * Vytvořil; ID objektu Uživatel [persistentní položka]
   * @return createdByID
  **/
  @ApiModelProperty(example = "null", value = "Vytvořil; ID objektu Uživatel [persistentní položka]")
  public String getCreatedByID() {
    return createdByID;
  }

   /**
   * Třída [persistentní položka]
   * @return CLSID
  **/
  @ApiModelProperty(example = "null", value = "Třída [persistentní položka]")
  public String getCLSID() {
    return CLSID;
  }

   /**
   * Typ změny [persistentní položka]
   * @return status
  **/
  @ApiModelProperty(example = "null", value = "Typ změny [persistentní položka]")
  public Integer getStatus() {
    return status;
  }

   /**
   * Aktivní [persistentní položka]
   * @return isActive
  **/
  @ApiModelProperty(example = "null", value = "Aktivní [persistentní položka]")
  public Boolean getIsActive() {
    return isActive;
  }

  public Datachangessetting cLSIDText(String cLSIDText) {
    this.cLSIDText = cLSIDText;
    return this;
  }

   /**
   * Třída (textově)
   * @return cLSIDText
  **/
  @ApiModelProperty(example = "null", value = "Třída (textově)")
  public String getCLSIDText() {
    return cLSIDText;
  }

  public void setCLSIDText(String cLSIDText) {
    this.cLSIDText = cLSIDText;
  }

  public Datachangessetting logInsert(Boolean logInsert) {
    this.logInsert = logInsert;
    return this;
  }

   /**
   * Zaznamenávat nové
   * @return logInsert
  **/
  @ApiModelProperty(example = "null", value = "Zaznamenávat nové")
  public Boolean getLogInsert() {
    return logInsert;
  }

  public void setLogInsert(Boolean logInsert) {
    this.logInsert = logInsert;
  }

  public Datachangessetting logUpdate(Boolean logUpdate) {
    this.logUpdate = logUpdate;
    return this;
  }

   /**
   * Zaznamenávat opravy
   * @return logUpdate
  **/
  @ApiModelProperty(example = "null", value = "Zaznamenávat opravy")
  public Boolean getLogUpdate() {
    return logUpdate;
  }

  public void setLogUpdate(Boolean logUpdate) {
    this.logUpdate = logUpdate;
  }

  public Datachangessetting logDelete(Boolean logDelete) {
    this.logDelete = logDelete;
    return this;
  }

   /**
   * Zaznamenávat mazání
   * @return logDelete
  **/
  @ApiModelProperty(example = "null", value = "Zaznamenávat mazání")
  public Boolean getLogDelete() {
    return logDelete;
  }

  public void setLogDelete(Boolean logDelete) {
    this.logDelete = logDelete;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Datachangessetting datachangessetting = (Datachangessetting) o;
    return Objects.equals(this.displayName, datachangessetting.displayName) &&
        Objects.equals(this.ID, datachangessetting.ID) &&
        Objects.equals(this.classID, datachangessetting.classID) &&
        Objects.equals(this.objVersion, datachangessetting.objVersion) &&
        Objects.equals(this.createdByID, datachangessetting.createdByID) &&
        Objects.equals(this.CLSID, datachangessetting.CLSID) &&
        Objects.equals(this.status, datachangessetting.status) &&
        Objects.equals(this.isActive, datachangessetting.isActive) &&
        Objects.equals(this.cLSIDText, datachangessetting.cLSIDText) &&
        Objects.equals(this.logInsert, datachangessetting.logInsert) &&
        Objects.equals(this.logUpdate, datachangessetting.logUpdate) &&
        Objects.equals(this.logDelete, datachangessetting.logDelete);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayName, ID, classID, objVersion, createdByID, CLSID, status, isActive, cLSIDText, logInsert, logUpdate, logDelete);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Datachangessetting {\n");
    
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
    sb.append("    classID: ").append(toIndentedString(classID)).append("\n");
    sb.append("    objVersion: ").append(toIndentedString(objVersion)).append("\n");
    sb.append("    createdByID: ").append(toIndentedString(createdByID)).append("\n");
    sb.append("    CLSID: ").append(toIndentedString(CLSID)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    cLSIDText: ").append(toIndentedString(cLSIDText)).append("\n");
    sb.append("    logInsert: ").append(toIndentedString(logInsert)).append("\n");
    sb.append("    logUpdate: ").append(toIndentedString(logUpdate)).append("\n");
    sb.append("    logDelete: ").append(toIndentedString(logDelete)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

