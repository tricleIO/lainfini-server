/**
 * abra gen web api (spojení testapi)
 * webové api systému 17.03.03
 *
 * OpenAPI spec version: 17.03.03
 * Contact: abragen@abra.eu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package application.service.abra.client.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;
import org.joda.time.DateTime;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;


/**
 * Logstoreposition
 */
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2017-03-29T11:52:08.096+02:00")
public class Logstoreposition   {
  @SerializedName("displayname")
  private String displayname = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("classid")
  private String classid = null;

  @SerializedName("objversion")
  private Integer objversion = null;

  @SerializedName("rows")
  private List<Logstorecontent> rows = new ArrayList<Logstorecontent>();

  @SerializedName("hidden")
  private Boolean hidden = null;

  @SerializedName("store_id")
  private String storeId = null;

  @SerializedName("code")
  private String code = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("barcode")
  private String barcode = null;

  @SerializedName("width")
  private Double width = null;

  @SerializedName("height")
  private Double height = null;

  @SerializedName("depth")
  private Double depth = null;

  @SerializedName("maxweight")
  private Double maxweight = null;

  @SerializedName("sizeunit")
  private Integer sizeunit = null;

  @SerializedName("frozen")
  private Boolean frozen = null;

  @SerializedName("accessibility")
  private Integer accessibility = null;

  @SerializedName("positiontype")
  private Integer positiontype = null;

  @SerializedName("usedweight")
  private Double usedweight = null;

  @SerializedName("usedspace")
  private Double usedspace = null;

  @SerializedName("basicfreeweight")
  private Double basicfreeweight = null;

  @SerializedName("basicfreespace")
  private Double basicfreespace = null;

  @SerializedName("reservedfordoctype")
  private String reservedfordoctype = null;

  @SerializedName("reservedfordoc_id")
  private String reservedfordocId = null;

  @SerializedName("logstorepositiondemands")
  private List<Logstorepositiondemand> logstorepositiondemands = new ArrayList<Logstorepositiondemand>();

  @SerializedName("maxspace")
  private Double maxspace = null;

  @SerializedName("sizeunitdesc")
  private String sizeunitdesc = null;

  @SerializedName("capacityunitdesc")
  private String capacityunitdesc = null;

  @SerializedName("positiontypedesc")
  private String positiontypedesc = null;

  @SerializedName("inventorystatus")
  private Integer inventorystatus = null;

  @SerializedName("lastinventory$date")
  private DateTime lastinventorydate = null;

  @SerializedName("dateofendinventory$date")
  private DateTime dateofendinventorydate = null;

  @SerializedName("basicusedweight")
  private Double basicusedweight = null;

  @SerializedName("basicusedspace")
  private Double basicusedspace = null;

  public Logstoreposition displayname(String displayname) {
    this.displayname = displayname;
    return this;
  }

   /**
   * název
   * @return displayname
  **/
  @ApiModelProperty(example = "null", value = "název")
  public String getDisplayname() {
    return displayname;
  }

  public void setDisplayname(String displayname) {
    this.displayname = displayname;
  }

  public Logstoreposition id(String id) {
    this.id = id;
    return this;
  }

   /**
   * vlastní id [persistentní položka]
   * @return id
  **/
  @ApiModelProperty(example = "null", value = "vlastní id [persistentní položka]")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public Logstoreposition classid(String classid) {
    this.classid = classid;
    return this;
  }

   /**
   * id třídy
   * @return classid
  **/
  @ApiModelProperty(example = "null", value = "id třídy")
  public String getClassid() {
    return classid;
  }

  public void setClassid(String classid) {
    this.classid = classid;
  }

  public Logstoreposition objversion(Integer objversion) {
    this.objversion = objversion;
    return this;
  }

   /**
   * verze objektu [persistentní položka]
   * @return objversion
  **/
  @ApiModelProperty(example = "null", value = "verze objektu [persistentní položka]")
  public Integer getObjversion() {
    return objversion;
  }

  public void setObjversion(Integer objversion) {
    this.objversion = objversion;
  }

  public Logstoreposition rows(List<Logstorecontent> rows) {
    this.rows = rows;
    return this;
  }

  public Logstoreposition addRowsItem(Logstorecontent rowsItem) {
    this.rows.add(rowsItem);
    return this;
  }

   /**
   * Řádky; kolekce bo obsah skladových pozic [nepersistentní položka]
   * @return rows
  **/
  @ApiModelProperty(example = "null", value = "Řádky; kolekce bo obsah skladových pozic [nepersistentní položka]")
  public List<Logstorecontent> getRows() {
    return rows;
  }

  public void setRows(List<Logstorecontent> rows) {
    this.rows = rows;
  }

  public Logstoreposition hidden(Boolean hidden) {
    this.hidden = hidden;
    return this;
  }

   /**
   * skrytý [persistentní položka]
   * @return hidden
  **/
  @ApiModelProperty(example = "null", value = "skrytý [persistentní položka]")
  public Boolean getHidden() {
    return hidden;
  }

  public void setHidden(Boolean hidden) {
    this.hidden = hidden;
  }

  public Logstoreposition storeId(String storeId) {
    this.storeId = storeId;
    return this;
  }

   /**
   * sklad; id objektu sklad [persistentní položka]
   * @return storeId
  **/
  @ApiModelProperty(example = "null", value = "sklad; id objektu sklad [persistentní položka]")
  public String getStoreId() {
    return storeId;
  }

  public void setStoreId(String storeId) {
    this.storeId = storeId;
  }

  public Logstoreposition code(String code) {
    this.code = code;
    return this;
  }

   /**
   * kód [persistentní položka]
   * @return code
  **/
  @ApiModelProperty(example = "null", value = "kód [persistentní položka]")
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }

  public Logstoreposition name(String name) {
    this.name = name;
    return this;
  }

   /**
   * název [persistentní položka]
   * @return name
  **/
  @ApiModelProperty(example = "null", value = "název [persistentní položka]")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Logstoreposition barcode(String barcode) {
    this.barcode = barcode;
    return this;
  }

   /**
   * Čárový kód [persistentní položka]
   * @return barcode
  **/
  @ApiModelProperty(example = "null", value = "Čárový kód [persistentní položka]")
  public String getBarcode() {
    return barcode;
  }

  public void setBarcode(String barcode) {
    this.barcode = barcode;
  }

  public Logstoreposition width(Double width) {
    this.width = width;
    return this;
  }

   /**
   * Šířka [persistentní položka]
   * @return width
  **/
  @ApiModelProperty(example = "null", value = "Šířka [persistentní položka]")
  public Double getWidth() {
    return width;
  }

  public void setWidth(Double width) {
    this.width = width;
  }

  public Logstoreposition height(Double height) {
    this.height = height;
    return this;
  }

   /**
   * výška [persistentní položka]
   * @return height
  **/
  @ApiModelProperty(example = "null", value = "výška [persistentní položka]")
  public Double getHeight() {
    return height;
  }

  public void setHeight(Double height) {
    this.height = height;
  }

  public Logstoreposition depth(Double depth) {
    this.depth = depth;
    return this;
  }

   /**
   * hloubka [persistentní položka]
   * @return depth
  **/
  @ApiModelProperty(example = "null", value = "hloubka [persistentní položka]")
  public Double getDepth() {
    return depth;
  }

  public void setDepth(Double depth) {
    this.depth = depth;
  }

  public Logstoreposition maxweight(Double maxweight) {
    this.maxweight = maxweight;
    return this;
  }

   /**
   * nosnost [persistentní položka]
   * @return maxweight
  **/
  @ApiModelProperty(example = "null", value = "nosnost [persistentní položka]")
  public Double getMaxweight() {
    return maxweight;
  }

  public void setMaxweight(Double maxweight) {
    this.maxweight = maxweight;
  }

  public Logstoreposition sizeunit(Integer sizeunit) {
    this.sizeunit = sizeunit;
    return this;
  }

   /**
   * jednotka rozměrů [persistentní položka]
   * @return sizeunit
  **/
  @ApiModelProperty(example = "null", value = "jednotka rozměrů [persistentní položka]")
  public Integer getSizeunit() {
    return sizeunit;
  }

  public void setSizeunit(Integer sizeunit) {
    this.sizeunit = sizeunit;
  }

  public Logstoreposition frozen(Boolean frozen) {
    this.frozen = frozen;
    return this;
  }

   /**
   * mimo provoz [persistentní položka]
   * @return frozen
  **/
  @ApiModelProperty(example = "null", value = "mimo provoz [persistentní položka]")
  public Boolean getFrozen() {
    return frozen;
  }

  public void setFrozen(Boolean frozen) {
    this.frozen = frozen;
  }

  public Logstoreposition accessibility(Integer accessibility) {
    this.accessibility = accessibility;
    return this;
  }

   /**
   * dostupnost [persistentní položka]
   * @return accessibility
  **/
  @ApiModelProperty(example = "null", value = "dostupnost [persistentní položka]")
  public Integer getAccessibility() {
    return accessibility;
  }

  public void setAccessibility(Integer accessibility) {
    this.accessibility = accessibility;
  }

  public Logstoreposition positiontype(Integer positiontype) {
    this.positiontype = positiontype;
    return this;
  }

   /**
   * typ pozice [persistentní položka]
   * @return positiontype
  **/
  @ApiModelProperty(example = "null", value = "typ pozice [persistentní položka]")
  public Integer getPositiontype() {
    return positiontype;
  }

  public void setPositiontype(Integer positiontype) {
    this.positiontype = positiontype;
  }

  public Logstoreposition usedweight(Double usedweight) {
    this.usedweight = usedweight;
    return this;
  }

   /**
   * hmotnost obsahu
   * @return usedweight
  **/
  @ApiModelProperty(example = "null", value = "hmotnost obsahu")
  public Double getUsedweight() {
    return usedweight;
  }

  public void setUsedweight(Double usedweight) {
    this.usedweight = usedweight;
  }

  public Logstoreposition usedspace(Double usedspace) {
    this.usedspace = usedspace;
    return this;
  }

   /**
   * objem obsahu
   * @return usedspace
  **/
  @ApiModelProperty(example = "null", value = "objem obsahu")
  public Double getUsedspace() {
    return usedspace;
  }

  public void setUsedspace(Double usedspace) {
    this.usedspace = usedspace;
  }

  public Logstoreposition basicfreeweight(Double basicfreeweight) {
    this.basicfreeweight = basicfreeweight;
    return this;
  }

   /**
   * volná nosnost [persistentní položka]
   * @return basicfreeweight
  **/
  @ApiModelProperty(example = "null", value = "volná nosnost [persistentní položka]")
  public Double getBasicfreeweight() {
    return basicfreeweight;
  }

  public void setBasicfreeweight(Double basicfreeweight) {
    this.basicfreeweight = basicfreeweight;
  }

  public Logstoreposition basicfreespace(Double basicfreespace) {
    this.basicfreespace = basicfreespace;
    return this;
  }

   /**
   * volný objem [persistentní položka]
   * @return basicfreespace
  **/
  @ApiModelProperty(example = "null", value = "volný objem [persistentní položka]")
  public Double getBasicfreespace() {
    return basicfreespace;
  }

  public void setBasicfreespace(Double basicfreespace) {
    this.basicfreespace = basicfreespace;
  }

  public Logstoreposition reservedfordoctype(String reservedfordoctype) {
    this.reservedfordoctype = reservedfordoctype;
    return this;
  }

   /**
   * typ vychystávaného dokladu [persistentní položka]
   * @return reservedfordoctype
  **/
  @ApiModelProperty(example = "null", value = "typ vychystávaného dokladu [persistentní položka]")
  public String getReservedfordoctype() {
    return reservedfordoctype;
  }

  public void setReservedfordoctype(String reservedfordoctype) {
    this.reservedfordoctype = reservedfordoctype;
  }

  public Logstoreposition reservedfordocId(String reservedfordocId) {
    this.reservedfordocId = reservedfordocId;
    return this;
  }

   /**
   * vazba na vychystávaný doklad; id objektu dokument [persistentní položka]
   * @return reservedfordocId
  **/
  @ApiModelProperty(example = "null", value = "vazba na vychystávaný doklad; id objektu dokument [persistentní položka]")
  public String getReservedfordocId() {
    return reservedfordocId;
  }

  public void setReservedfordocId(String reservedfordocId) {
    this.reservedfordocId = reservedfordocId;
  }

  public Logstoreposition logstorepositiondemands(List<Logstorepositiondemand> logstorepositiondemands) {
    this.logstorepositiondemands = logstorepositiondemands;
    return this;
  }

  public Logstoreposition addLogstorepositiondemandsItem(Logstorepositiondemand logstorepositiondemandsItem) {
    this.logstorepositiondemands.add(logstorepositiondemandsItem);
    return this;
  }

   /**
   * přednostní naskladnění; kolekce bo přednostní naskladnění [nepersistentní položka]
   * @return logstorepositiondemands
  **/
  @ApiModelProperty(example = "null", value = "přednostní naskladnění; kolekce bo přednostní naskladnění [nepersistentní položka]")
  public List<Logstorepositiondemand> getLogstorepositiondemands() {
    return logstorepositiondemands;
  }

  public void setLogstorepositiondemands(List<Logstorepositiondemand> logstorepositiondemands) {
    this.logstorepositiondemands = logstorepositiondemands;
  }

  public Logstoreposition maxspace(Double maxspace) {
    this.maxspace = maxspace;
    return this;
  }

   /**
   * prostor
   * @return maxspace
  **/
  @ApiModelProperty(example = "null", value = "prostor")
  public Double getMaxspace() {
    return maxspace;
  }

  public void setMaxspace(Double maxspace) {
    this.maxspace = maxspace;
  }

  public Logstoreposition sizeunitdesc(String sizeunitdesc) {
    this.sizeunitdesc = sizeunitdesc;
    return this;
  }

   /**
   * jednotka rozměrů - označení
   * @return sizeunitdesc
  **/
  @ApiModelProperty(example = "null", value = "jednotka rozměrů - označení")
  public String getSizeunitdesc() {
    return sizeunitdesc;
  }

  public void setSizeunitdesc(String sizeunitdesc) {
    this.sizeunitdesc = sizeunitdesc;
  }

  public Logstoreposition capacityunitdesc(String capacityunitdesc) {
    this.capacityunitdesc = capacityunitdesc;
    return this;
  }

   /**
   * jednotka objemu - označení
   * @return capacityunitdesc
  **/
  @ApiModelProperty(example = "null", value = "jednotka objemu - označení")
  public String getCapacityunitdesc() {
    return capacityunitdesc;
  }

  public void setCapacityunitdesc(String capacityunitdesc) {
    this.capacityunitdesc = capacityunitdesc;
  }

  public Logstoreposition positiontypedesc(String positiontypedesc) {
    this.positiontypedesc = positiontypedesc;
    return this;
  }

   /**
   * typ pozice - popis
   * @return positiontypedesc
  **/
  @ApiModelProperty(example = "null", value = "typ pozice - popis")
  public String getPositiontypedesc() {
    return positiontypedesc;
  }

  public void setPositiontypedesc(String positiontypedesc) {
    this.positiontypedesc = positiontypedesc;
  }

  public Logstoreposition inventorystatus(Integer inventorystatus) {
    this.inventorystatus = inventorystatus;
    return this;
  }

   /**
   * blokace inventurou [persistentní položka]
   * @return inventorystatus
  **/
  @ApiModelProperty(example = "null", value = "blokace inventurou [persistentní položka]")
  public Integer getInventorystatus() {
    return inventorystatus;
  }

  public void setInventorystatus(Integer inventorystatus) {
    this.inventorystatus = inventorystatus;
  }

  public Logstoreposition lastinventorydate(DateTime lastinventorydate) {
    this.lastinventorydate = lastinventorydate;
    return this;
  }

   /**
   * poslední inventarizace [persistentní položka]
   * @return lastinventorydate
  **/
  @ApiModelProperty(example = "null", value = "poslední inventarizace [persistentní položka]")
  public DateTime getLastinventorydate() {
    return lastinventorydate;
  }

  public void setLastinventorydate(DateTime lastinventorydate) {
    this.lastinventorydate = lastinventorydate;
  }

  public Logstoreposition dateofendinventorydate(DateTime dateofendinventorydate) {
    this.dateofendinventorydate = dateofendinventorydate;
    return this;
  }

   /**
   * konec inventury [persistentní položka]
   * @return dateofendinventorydate
  **/
  @ApiModelProperty(example = "null", value = "konec inventury [persistentní položka]")
  public DateTime getDateofendinventorydate() {
    return dateofendinventorydate;
  }

  public void setDateofendinventorydate(DateTime dateofendinventorydate) {
    this.dateofendinventorydate = dateofendinventorydate;
  }

  public Logstoreposition basicusedweight(Double basicusedweight) {
    this.basicusedweight = basicusedweight;
    return this;
  }

   /**
   * použitá nosnost [persistentní položka]
   * @return basicusedweight
  **/
  @ApiModelProperty(example = "null", value = "použitá nosnost [persistentní položka]")
  public Double getBasicusedweight() {
    return basicusedweight;
  }

  public void setBasicusedweight(Double basicusedweight) {
    this.basicusedweight = basicusedweight;
  }

  public Logstoreposition basicusedspace(Double basicusedspace) {
    this.basicusedspace = basicusedspace;
    return this;
  }

   /**
   * použitý objem [persistentní položka]
   * @return basicusedspace
  **/
  @ApiModelProperty(example = "null", value = "použitý objem [persistentní položka]")
  public Double getBasicusedspace() {
    return basicusedspace;
  }

  public void setBasicusedspace(Double basicusedspace) {
    this.basicusedspace = basicusedspace;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Logstoreposition logstoreposition = (Logstoreposition) o;
    return Objects.equals(this.displayname, logstoreposition.displayname) &&
        Objects.equals(this.id, logstoreposition.id) &&
        Objects.equals(this.classid, logstoreposition.classid) &&
        Objects.equals(this.objversion, logstoreposition.objversion) &&
        Objects.equals(this.rows, logstoreposition.rows) &&
        Objects.equals(this.hidden, logstoreposition.hidden) &&
        Objects.equals(this.storeId, logstoreposition.storeId) &&
        Objects.equals(this.code, logstoreposition.code) &&
        Objects.equals(this.name, logstoreposition.name) &&
        Objects.equals(this.barcode, logstoreposition.barcode) &&
        Objects.equals(this.width, logstoreposition.width) &&
        Objects.equals(this.height, logstoreposition.height) &&
        Objects.equals(this.depth, logstoreposition.depth) &&
        Objects.equals(this.maxweight, logstoreposition.maxweight) &&
        Objects.equals(this.sizeunit, logstoreposition.sizeunit) &&
        Objects.equals(this.frozen, logstoreposition.frozen) &&
        Objects.equals(this.accessibility, logstoreposition.accessibility) &&
        Objects.equals(this.positiontype, logstoreposition.positiontype) &&
        Objects.equals(this.usedweight, logstoreposition.usedweight) &&
        Objects.equals(this.usedspace, logstoreposition.usedspace) &&
        Objects.equals(this.basicfreeweight, logstoreposition.basicfreeweight) &&
        Objects.equals(this.basicfreespace, logstoreposition.basicfreespace) &&
        Objects.equals(this.reservedfordoctype, logstoreposition.reservedfordoctype) &&
        Objects.equals(this.reservedfordocId, logstoreposition.reservedfordocId) &&
        Objects.equals(this.logstorepositiondemands, logstoreposition.logstorepositiondemands) &&
        Objects.equals(this.maxspace, logstoreposition.maxspace) &&
        Objects.equals(this.sizeunitdesc, logstoreposition.sizeunitdesc) &&
        Objects.equals(this.capacityunitdesc, logstoreposition.capacityunitdesc) &&
        Objects.equals(this.positiontypedesc, logstoreposition.positiontypedesc) &&
        Objects.equals(this.inventorystatus, logstoreposition.inventorystatus) &&
        Objects.equals(this.lastinventorydate, logstoreposition.lastinventorydate) &&
        Objects.equals(this.dateofendinventorydate, logstoreposition.dateofendinventorydate) &&
        Objects.equals(this.basicusedweight, logstoreposition.basicusedweight) &&
        Objects.equals(this.basicusedspace, logstoreposition.basicusedspace);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayname, id, classid, objversion, rows, hidden, storeId, code, name, barcode, width, height, depth, maxweight, sizeunit, frozen, accessibility, positiontype, usedweight, usedspace, basicfreeweight, basicfreespace, reservedfordoctype, reservedfordocId, logstorepositiondemands, maxspace, sizeunitdesc, capacityunitdesc, positiontypedesc, inventorystatus, lastinventorydate, dateofendinventorydate, basicusedweight, basicusedspace);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Logstoreposition {\n");
    
    sb.append("    displayname: ").append(toIndentedString(displayname)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    classid: ").append(toIndentedString(classid)).append("\n");
    sb.append("    objversion: ").append(toIndentedString(objversion)).append("\n");
    sb.append("    rows: ").append(toIndentedString(rows)).append("\n");
    sb.append("    hidden: ").append(toIndentedString(hidden)).append("\n");
    sb.append("    storeId: ").append(toIndentedString(storeId)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    barcode: ").append(toIndentedString(barcode)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    depth: ").append(toIndentedString(depth)).append("\n");
    sb.append("    maxweight: ").append(toIndentedString(maxweight)).append("\n");
    sb.append("    sizeunit: ").append(toIndentedString(sizeunit)).append("\n");
    sb.append("    frozen: ").append(toIndentedString(frozen)).append("\n");
    sb.append("    accessibility: ").append(toIndentedString(accessibility)).append("\n");
    sb.append("    positiontype: ").append(toIndentedString(positiontype)).append("\n");
    sb.append("    usedweight: ").append(toIndentedString(usedweight)).append("\n");
    sb.append("    usedspace: ").append(toIndentedString(usedspace)).append("\n");
    sb.append("    basicfreeweight: ").append(toIndentedString(basicfreeweight)).append("\n");
    sb.append("    basicfreespace: ").append(toIndentedString(basicfreespace)).append("\n");
    sb.append("    reservedfordoctype: ").append(toIndentedString(reservedfordoctype)).append("\n");
    sb.append("    reservedfordocId: ").append(toIndentedString(reservedfordocId)).append("\n");
    sb.append("    logstorepositiondemands: ").append(toIndentedString(logstorepositiondemands)).append("\n");
    sb.append("    maxspace: ").append(toIndentedString(maxspace)).append("\n");
    sb.append("    sizeunitdesc: ").append(toIndentedString(sizeunitdesc)).append("\n");
    sb.append("    capacityunitdesc: ").append(toIndentedString(capacityunitdesc)).append("\n");
    sb.append("    positiontypedesc: ").append(toIndentedString(positiontypedesc)).append("\n");
    sb.append("    inventorystatus: ").append(toIndentedString(inventorystatus)).append("\n");
    sb.append("    lastinventorydate: ").append(toIndentedString(lastinventorydate)).append("\n");
    sb.append("    dateofendinventorydate: ").append(toIndentedString(dateofendinventorydate)).append("\n");
    sb.append("    basicusedweight: ").append(toIndentedString(basicusedweight)).append("\n");
    sb.append("    basicusedspace: ").append(toIndentedString(basicusedspace)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

