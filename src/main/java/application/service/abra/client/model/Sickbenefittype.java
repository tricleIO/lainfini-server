/**
 * ABRA Gen Web API (spojení testapi)
 * Webové API systému 17.03.03
 *
 * OpenAPI spec version: 17.03.03
 * Contact: abragen@abra.eu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package application.service.abra.client.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;
import org.joda.time.DateTime;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;


/**
 * Sickbenefittype
 */
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2017-03-26T20:30:15.152+02:00")
public class Sickbenefittype   {
  @SerializedName("DisplayName")
  private String displayName = null;

  @SerializedName("ID")
  private String ID = null;

  @SerializedName("ClassID")
  private String classID = null;

  @SerializedName("ObjVersion")
  private Integer objVersion = null;

  @SerializedName("Rows")
  private List<Sickbenefittyperow> rows = new ArrayList<Sickbenefittyperow>();

  @SerializedName("Hidden")
  private Boolean hidden = null;

  @SerializedName("Code")
  private String code = null;

  @SerializedName("Name")
  private String name = null;

  @SerializedName("SickBaseType")
  private Integer sickBaseType = null;

  @SerializedName("OneCase")
  private Boolean oneCase = null;

  @SerializedName("IsAbsent")
  private Boolean isAbsent = null;

  @SerializedName("MaxDayCount")
  private Double maxDayCount = null;

  @SerializedName("AverageReduction")
  private Boolean averageReduction = null;

  @SerializedName("NoExcludedDays")
  private Boolean noExcludedDays = null;

  @SerializedName("IsUnpaid")
  private Boolean isUnpaid = null;

  @SerializedName("MaxExcludedDays")
  private Double maxExcludedDays = null;

  @SerializedName("SBaseTypeSText")
  private String sBaseTypeSText = null;

  @SerializedName("SBaseTypeLText")
  private String sBaseTypeLText = null;

  @SerializedName("PayWorkingDays")
  private Boolean payWorkingDays = null;

  @SerializedName("AmountExpression")
  private String amountExpression = null;

  @SerializedName("ValidTo$DATE")
  private DateTime validToDATE = null;

  @SerializedName("ContinuingSickBenefit")
  private Boolean continuingSickBenefit = null;

  @SerializedName("SickBenefitRounding")
  private Integer sickBenefitRounding = null;

  @SerializedName("DayBaseRounding")
  private Integer dayBaseRounding = null;

  @SerializedName("Preferred")
  private Boolean preferred = null;

   /**
   * Název
   * @return displayName
  **/
  @ApiModelProperty(example = "null", value = "Název")
  public String getDisplayName() {
    return displayName;
  }

   /**
   * Vlastní ID [persistentní položka]
   * @return ID
  **/
  @ApiModelProperty(example = "null", value = "Vlastní ID [persistentní položka]")
  public String getID() {
    return ID;
  }

   /**
   * ID třídy
   * @return classID
  **/
  @ApiModelProperty(example = "null", value = "ID třídy")
  public String getClassID() {
    return classID;
  }

   /**
   * Verze objektu [persistentní položka]
   * @return objVersion
  **/
  @ApiModelProperty(example = "null", value = "Verze objektu [persistentní položka]")
  public Integer getObjVersion() {
    return objVersion;
  }

  public Sickbenefittype rows(List<Sickbenefittyperow> rows) {
    this.rows = rows;
    return this;
  }

  public Sickbenefittype addRowsItem(Sickbenefittyperow rowsItem) {
    this.rows.add(rowsItem);
    return this;
  }

   /**
   * Sazby; kolekce BO Sazba nemocenské dávky [nepersistentní položka]
   * @return rows
  **/
  @ApiModelProperty(example = "null", value = "Sazby; kolekce BO Sazba nemocenské dávky [nepersistentní položka]")
  public List<Sickbenefittyperow> getRows() {
    return rows;
  }

  public void setRows(List<Sickbenefittyperow> rows) {
    this.rows = rows;
  }

  public Sickbenefittype hidden(Boolean hidden) {
    this.hidden = hidden;
    return this;
  }

   /**
   * Skrytý [persistentní položka]
   * @return hidden
  **/
  @ApiModelProperty(example = "null", value = "Skrytý [persistentní položka]")
  public Boolean getHidden() {
    return hidden;
  }

  public void setHidden(Boolean hidden) {
    this.hidden = hidden;
  }

  public Sickbenefittype code(String code) {
    this.code = code;
    return this;
  }

   /**
   * Kód [persistentní položka]
   * @return code
  **/
  @ApiModelProperty(example = "null", value = "Kód [persistentní položka]")
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }

  public Sickbenefittype name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Název [persistentní položka]
   * @return name
  **/
  @ApiModelProperty(example = "null", value = "Název [persistentní položka]")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Sickbenefittype sickBaseType(Integer sickBaseType) {
    this.sickBaseType = sickBaseType;
    return this;
  }

   /**
   * Typ [persistentní položka]
   * @return sickBaseType
  **/
  @ApiModelProperty(example = "null", value = "Typ [persistentní položka]")
  public Integer getSickBaseType() {
    return sickBaseType;
  }

  public void setSickBaseType(Integer sickBaseType) {
    this.sickBaseType = sickBaseType;
  }

  public Sickbenefittype oneCase(Boolean oneCase) {
    this.oneCase = oneCase;
    return this;
  }

   /**
   * Jedn. [persistentní položka]
   * @return oneCase
  **/
  @ApiModelProperty(example = "null", value = "Jedn. [persistentní položka]")
  public Boolean getOneCase() {
    return oneCase;
  }

  public void setOneCase(Boolean oneCase) {
    this.oneCase = oneCase;
  }

  public Sickbenefittype isAbsent(Boolean isAbsent) {
    this.isAbsent = isAbsent;
    return this;
  }

   /**
   * Nepřít. [persistentní položka]
   * @return isAbsent
  **/
  @ApiModelProperty(example = "null", value = "Nepřít. [persistentní položka]")
  public Boolean getIsAbsent() {
    return isAbsent;
  }

  public void setIsAbsent(Boolean isAbsent) {
    this.isAbsent = isAbsent;
  }

  public Sickbenefittype maxDayCount(Double maxDayCount) {
    this.maxDayCount = maxDayCount;
    return this;
  }

   /**
   * Max. dní [persistentní položka]
   * @return maxDayCount
  **/
  @ApiModelProperty(example = "null", value = "Max. dní [persistentní položka]")
  public Double getMaxDayCount() {
    return maxDayCount;
  }

  public void setMaxDayCount(Double maxDayCount) {
    this.maxDayCount = maxDayCount;
  }

  public Sickbenefittype averageReduction(Boolean averageReduction) {
    this.averageReduction = averageReduction;
    return this;
  }

   /**
   * Redukce DVZ [persistentní položka]
   * @return averageReduction
  **/
  @ApiModelProperty(example = "null", value = "Redukce DVZ [persistentní položka]")
  public Boolean getAverageReduction() {
    return averageReduction;
  }

  public void setAverageReduction(Boolean averageReduction) {
    this.averageReduction = averageReduction;
  }

  public Sickbenefittype noExcludedDays(Boolean noExcludedDays) {
    this.noExcludedDays = noExcludedDays;
    return this;
  }

   /**
   * Není vyl.doba [persistentní položka]
   * @return noExcludedDays
  **/
  @ApiModelProperty(example = "null", value = "Není vyl.doba [persistentní položka]")
  public Boolean getNoExcludedDays() {
    return noExcludedDays;
  }

  public void setNoExcludedDays(Boolean noExcludedDays) {
    this.noExcludedDays = noExcludedDays;
  }

  public Sickbenefittype isUnpaid(Boolean isUnpaid) {
    this.isUnpaid = isUnpaid;
    return this;
  }

   /**
   * Neproplácí se [persistentní položka]
   * @return isUnpaid
  **/
  @ApiModelProperty(example = "null", value = "Neproplácí se [persistentní položka]")
  public Boolean getIsUnpaid() {
    return isUnpaid;
  }

  public void setIsUnpaid(Boolean isUnpaid) {
    this.isUnpaid = isUnpaid;
  }

  public Sickbenefittype maxExcludedDays(Double maxExcludedDays) {
    this.maxExcludedDays = maxExcludedDays;
    return this;
  }

   /**
   * Max. počet vyl. dob [persistentní položka]
   * @return maxExcludedDays
  **/
  @ApiModelProperty(example = "null", value = "Max. počet vyl. dob [persistentní položka]")
  public Double getMaxExcludedDays() {
    return maxExcludedDays;
  }

  public void setMaxExcludedDays(Double maxExcludedDays) {
    this.maxExcludedDays = maxExcludedDays;
  }

  public Sickbenefittype sBaseTypeSText(String sBaseTypeSText) {
    this.sBaseTypeSText = sBaseTypeSText;
    return this;
  }

   /**
   * Typ
   * @return sBaseTypeSText
  **/
  @ApiModelProperty(example = "null", value = "Typ")
  public String getSBaseTypeSText() {
    return sBaseTypeSText;
  }

  public void setSBaseTypeSText(String sBaseTypeSText) {
    this.sBaseTypeSText = sBaseTypeSText;
  }

  public Sickbenefittype sBaseTypeLText(String sBaseTypeLText) {
    this.sBaseTypeLText = sBaseTypeLText;
    return this;
  }

   /**
   * Typ - popis
   * @return sBaseTypeLText
  **/
  @ApiModelProperty(example = "null", value = "Typ - popis")
  public String getSBaseTypeLText() {
    return sBaseTypeLText;
  }

  public void setSBaseTypeLText(String sBaseTypeLText) {
    this.sBaseTypeLText = sBaseTypeLText;
  }

  public Sickbenefittype payWorkingDays(Boolean payWorkingDays) {
    this.payWorkingDays = payWorkingDays;
    return this;
  }

   /**
   * Proplácet pracovní dny [persistentní položka]
   * @return payWorkingDays
  **/
  @ApiModelProperty(example = "null", value = "Proplácet pracovní dny [persistentní položka]")
  public Boolean getPayWorkingDays() {
    return payWorkingDays;
  }

  public void setPayWorkingDays(Boolean payWorkingDays) {
    this.payWorkingDays = payWorkingDays;
  }

  public Sickbenefittype amountExpression(String amountExpression) {
    this.amountExpression = amountExpression;
    return this;
  }

   /**
   * Korekce částky [persistentní položka]
   * @return amountExpression
  **/
  @ApiModelProperty(example = "null", value = "Korekce částky [persistentní položka]")
  public String getAmountExpression() {
    return amountExpression;
  }

  public void setAmountExpression(String amountExpression) {
    this.amountExpression = amountExpression;
  }

  public Sickbenefittype validToDATE(DateTime validToDATE) {
    this.validToDATE = validToDATE;
    return this;
  }

   /**
   * Platí do [persistentní položka]
   * @return validToDATE
  **/
  @ApiModelProperty(example = "null", value = "Platí do [persistentní položka]")
  public DateTime getValidToDATE() {
    return validToDATE;
  }

  public void setValidToDATE(DateTime validToDATE) {
    this.validToDATE = validToDATE;
  }

  public Sickbenefittype continuingSickBenefit(Boolean continuingSickBenefit) {
    this.continuingSickBenefit = continuingSickBenefit;
    return this;
  }

   /**
   * Pokračující dávka [persistentní položka]
   * @return continuingSickBenefit
  **/
  @ApiModelProperty(example = "null", value = "Pokračující dávka [persistentní položka]")
  public Boolean getContinuingSickBenefit() {
    return continuingSickBenefit;
  }

  public void setContinuingSickBenefit(Boolean continuingSickBenefit) {
    this.continuingSickBenefit = continuingSickBenefit;
  }

  public Sickbenefittype sickBenefitRounding(Integer sickBenefitRounding) {
    this.sickBenefitRounding = sickBenefitRounding;
    return this;
  }

   /**
   * Zaokrouhlení dávky [persistentní položka]
   * @return sickBenefitRounding
  **/
  @ApiModelProperty(example = "null", value = "Zaokrouhlení dávky [persistentní položka]")
  public Integer getSickBenefitRounding() {
    return sickBenefitRounding;
  }

  public void setSickBenefitRounding(Integer sickBenefitRounding) {
    this.sickBenefitRounding = sickBenefitRounding;
  }

  public Sickbenefittype dayBaseRounding(Integer dayBaseRounding) {
    this.dayBaseRounding = dayBaseRounding;
    return this;
  }

   /**
   * Zaokrouhlení DVZ [persistentní položka]
   * @return dayBaseRounding
  **/
  @ApiModelProperty(example = "null", value = "Zaokrouhlení DVZ [persistentní položka]")
  public Integer getDayBaseRounding() {
    return dayBaseRounding;
  }

  public void setDayBaseRounding(Integer dayBaseRounding) {
    this.dayBaseRounding = dayBaseRounding;
  }

  public Sickbenefittype preferred(Boolean preferred) {
    this.preferred = preferred;
    return this;
  }

   /**
   * Předvyplňovat [persistentní položka]
   * @return preferred
  **/
  @ApiModelProperty(example = "null", value = "Předvyplňovat [persistentní položka]")
  public Boolean getPreferred() {
    return preferred;
  }

  public void setPreferred(Boolean preferred) {
    this.preferred = preferred;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Sickbenefittype sickbenefittype = (Sickbenefittype) o;
    return Objects.equals(this.displayName, sickbenefittype.displayName) &&
        Objects.equals(this.ID, sickbenefittype.ID) &&
        Objects.equals(this.classID, sickbenefittype.classID) &&
        Objects.equals(this.objVersion, sickbenefittype.objVersion) &&
        Objects.equals(this.rows, sickbenefittype.rows) &&
        Objects.equals(this.hidden, sickbenefittype.hidden) &&
        Objects.equals(this.code, sickbenefittype.code) &&
        Objects.equals(this.name, sickbenefittype.name) &&
        Objects.equals(this.sickBaseType, sickbenefittype.sickBaseType) &&
        Objects.equals(this.oneCase, sickbenefittype.oneCase) &&
        Objects.equals(this.isAbsent, sickbenefittype.isAbsent) &&
        Objects.equals(this.maxDayCount, sickbenefittype.maxDayCount) &&
        Objects.equals(this.averageReduction, sickbenefittype.averageReduction) &&
        Objects.equals(this.noExcludedDays, sickbenefittype.noExcludedDays) &&
        Objects.equals(this.isUnpaid, sickbenefittype.isUnpaid) &&
        Objects.equals(this.maxExcludedDays, sickbenefittype.maxExcludedDays) &&
        Objects.equals(this.sBaseTypeSText, sickbenefittype.sBaseTypeSText) &&
        Objects.equals(this.sBaseTypeLText, sickbenefittype.sBaseTypeLText) &&
        Objects.equals(this.payWorkingDays, sickbenefittype.payWorkingDays) &&
        Objects.equals(this.amountExpression, sickbenefittype.amountExpression) &&
        Objects.equals(this.validToDATE, sickbenefittype.validToDATE) &&
        Objects.equals(this.continuingSickBenefit, sickbenefittype.continuingSickBenefit) &&
        Objects.equals(this.sickBenefitRounding, sickbenefittype.sickBenefitRounding) &&
        Objects.equals(this.dayBaseRounding, sickbenefittype.dayBaseRounding) &&
        Objects.equals(this.preferred, sickbenefittype.preferred);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayName, ID, classID, objVersion, rows, hidden, code, name, sickBaseType, oneCase, isAbsent, maxDayCount, averageReduction, noExcludedDays, isUnpaid, maxExcludedDays, sBaseTypeSText, sBaseTypeLText, payWorkingDays, amountExpression, validToDATE, continuingSickBenefit, sickBenefitRounding, dayBaseRounding, preferred);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Sickbenefittype {\n");
    
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
    sb.append("    classID: ").append(toIndentedString(classID)).append("\n");
    sb.append("    objVersion: ").append(toIndentedString(objVersion)).append("\n");
    sb.append("    rows: ").append(toIndentedString(rows)).append("\n");
    sb.append("    hidden: ").append(toIndentedString(hidden)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    sickBaseType: ").append(toIndentedString(sickBaseType)).append("\n");
    sb.append("    oneCase: ").append(toIndentedString(oneCase)).append("\n");
    sb.append("    isAbsent: ").append(toIndentedString(isAbsent)).append("\n");
    sb.append("    maxDayCount: ").append(toIndentedString(maxDayCount)).append("\n");
    sb.append("    averageReduction: ").append(toIndentedString(averageReduction)).append("\n");
    sb.append("    noExcludedDays: ").append(toIndentedString(noExcludedDays)).append("\n");
    sb.append("    isUnpaid: ").append(toIndentedString(isUnpaid)).append("\n");
    sb.append("    maxExcludedDays: ").append(toIndentedString(maxExcludedDays)).append("\n");
    sb.append("    sBaseTypeSText: ").append(toIndentedString(sBaseTypeSText)).append("\n");
    sb.append("    sBaseTypeLText: ").append(toIndentedString(sBaseTypeLText)).append("\n");
    sb.append("    payWorkingDays: ").append(toIndentedString(payWorkingDays)).append("\n");
    sb.append("    amountExpression: ").append(toIndentedString(amountExpression)).append("\n");
    sb.append("    validToDATE: ").append(toIndentedString(validToDATE)).append("\n");
    sb.append("    continuingSickBenefit: ").append(toIndentedString(continuingSickBenefit)).append("\n");
    sb.append("    sickBenefitRounding: ").append(toIndentedString(sickBenefitRounding)).append("\n");
    sb.append("    dayBaseRounding: ").append(toIndentedString(dayBaseRounding)).append("\n");
    sb.append("    preferred: ").append(toIndentedString(preferred)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

