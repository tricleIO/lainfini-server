/**
 * ABRA Gen Web API (spojení testapi)
 * Webové API systému 17.03.03
 *
 * OpenAPI spec version: 17.03.03
 * Contact: abragen@abra.eu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package application.service.abra.client.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;


/**
 * Vatsummarydefinition
 */
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2017-03-26T20:30:15.152+02:00")
public class Vatsummarydefinition   {
  @SerializedName("DisplayName")
  private String displayName = null;

  @SerializedName("ID")
  private String ID = null;

  @SerializedName("ClassID")
  private String classID = null;

  @SerializedName("ObjVersion")
  private Integer objVersion = null;

  @SerializedName("Rows")
  private List<Vatsummarydefinitionrow> rows = new ArrayList<Vatsummarydefinitionrow>();

  @SerializedName("Hidden")
  private Boolean hidden = null;

  @SerializedName("Code")
  private String code = null;

  @SerializedName("Description")
  private String description = null;

  @SerializedName("Country_ID")
  private String countryID = null;

  @SerializedName("PrefillExpressions")
  private List<Vatsummarydefinitionprefillexpression> prefillExpressions = new ArrayList<Vatsummarydefinitionprefillexpression>();

  @SerializedName("ClosingKind")
  private Integer closingKind = null;

  @SerializedName("ClosingKindAsText")
  private String closingKindAsText = null;

  @SerializedName("NotForVATClosing")
  private Boolean notForVATClosing = null;

   /**
   * Název
   * @return displayName
  **/
  @ApiModelProperty(example = "null", value = "Název")
  public String getDisplayName() {
    return displayName;
  }

   /**
   * Vlastní ID [persistentní položka]
   * @return ID
  **/
  @ApiModelProperty(example = "null", value = "Vlastní ID [persistentní položka]")
  public String getID() {
    return ID;
  }

   /**
   * ID třídy
   * @return classID
  **/
  @ApiModelProperty(example = "null", value = "ID třídy")
  public String getClassID() {
    return classID;
  }

   /**
   * Verze objektu [persistentní položka]
   * @return objVersion
  **/
  @ApiModelProperty(example = "null", value = "Verze objektu [persistentní položka]")
  public Integer getObjVersion() {
    return objVersion;
  }

  public Vatsummarydefinition rows(List<Vatsummarydefinitionrow> rows) {
    this.rows = rows;
    return this;
  }

  public Vatsummarydefinition addRowsItem(Vatsummarydefinitionrow rowsItem) {
    this.rows.add(rowsItem);
    return this;
  }

   /**
   * Řádky; kolekce BO Definice pro DPH přiznání - řádek [nepersistentní položka]
   * @return rows
  **/
  @ApiModelProperty(example = "null", value = "Řádky; kolekce BO Definice pro DPH přiznání - řádek [nepersistentní položka]")
  public List<Vatsummarydefinitionrow> getRows() {
    return rows;
  }

  public void setRows(List<Vatsummarydefinitionrow> rows) {
    this.rows = rows;
  }

  public Vatsummarydefinition hidden(Boolean hidden) {
    this.hidden = hidden;
    return this;
  }

   /**
   * Skrytý [persistentní položka]
   * @return hidden
  **/
  @ApiModelProperty(example = "null", value = "Skrytý [persistentní položka]")
  public Boolean getHidden() {
    return hidden;
  }

  public void setHidden(Boolean hidden) {
    this.hidden = hidden;
  }

  public Vatsummarydefinition code(String code) {
    this.code = code;
    return this;
  }

   /**
   * Kód [persistentní položka]
   * @return code
  **/
  @ApiModelProperty(example = "null", value = "Kód [persistentní položka]")
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }

  public Vatsummarydefinition description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Popis [persistentní položka]
   * @return description
  **/
  @ApiModelProperty(example = "null", value = "Popis [persistentní položka]")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public Vatsummarydefinition countryID(String countryID) {
    this.countryID = countryID;
    return this;
  }

   /**
   * Země; ID objektu Země [persistentní položka]
   * @return countryID
  **/
  @ApiModelProperty(example = "null", value = "Země; ID objektu Země [persistentní položka]")
  public String getCountryID() {
    return countryID;
  }

  public void setCountryID(String countryID) {
    this.countryID = countryID;
  }

  public Vatsummarydefinition prefillExpressions(List<Vatsummarydefinitionprefillexpression> prefillExpressions) {
    this.prefillExpressions = prefillExpressions;
    return this;
  }

  public Vatsummarydefinition addPrefillExpressionsItem(Vatsummarydefinitionprefillexpression prefillExpressionsItem) {
    this.prefillExpressions.add(prefillExpressionsItem);
    return this;
  }

   /**
   * Předvyplnění; kolekce BO Definice pro DPH přiznání - předvyplnění [nepersistentní položka]
   * @return prefillExpressions
  **/
  @ApiModelProperty(example = "null", value = "Předvyplnění; kolekce BO Definice pro DPH přiznání - předvyplnění [nepersistentní položka]")
  public List<Vatsummarydefinitionprefillexpression> getPrefillExpressions() {
    return prefillExpressions;
  }

  public void setPrefillExpressions(List<Vatsummarydefinitionprefillexpression> prefillExpressions) {
    this.prefillExpressions = prefillExpressions;
  }

  public Vatsummarydefinition closingKind(Integer closingKind) {
    this.closingKind = closingKind;
    return this;
  }

   /**
   * Typ přiznání [persistentní položka]
   * @return closingKind
  **/
  @ApiModelProperty(example = "null", value = "Typ přiznání [persistentní položka]")
  public Integer getClosingKind() {
    return closingKind;
  }

  public void setClosingKind(Integer closingKind) {
    this.closingKind = closingKind;
  }

  public Vatsummarydefinition closingKindAsText(String closingKindAsText) {
    this.closingKindAsText = closingKindAsText;
    return this;
  }

   /**
   * Typ přiznání
   * @return closingKindAsText
  **/
  @ApiModelProperty(example = "null", value = "Typ přiznání")
  public String getClosingKindAsText() {
    return closingKindAsText;
  }

  public void setClosingKindAsText(String closingKindAsText) {
    this.closingKindAsText = closingKindAsText;
  }

  public Vatsummarydefinition notForVATClosing(Boolean notForVATClosing) {
    this.notForVATClosing = notForVATClosing;
    return this;
  }

   /**
   * Ne pro uzávěrku DPH [persistentní položka]
   * @return notForVATClosing
  **/
  @ApiModelProperty(example = "null", value = "Ne pro uzávěrku DPH [persistentní položka]")
  public Boolean getNotForVATClosing() {
    return notForVATClosing;
  }

  public void setNotForVATClosing(Boolean notForVATClosing) {
    this.notForVATClosing = notForVATClosing;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Vatsummarydefinition vatsummarydefinition = (Vatsummarydefinition) o;
    return Objects.equals(this.displayName, vatsummarydefinition.displayName) &&
        Objects.equals(this.ID, vatsummarydefinition.ID) &&
        Objects.equals(this.classID, vatsummarydefinition.classID) &&
        Objects.equals(this.objVersion, vatsummarydefinition.objVersion) &&
        Objects.equals(this.rows, vatsummarydefinition.rows) &&
        Objects.equals(this.hidden, vatsummarydefinition.hidden) &&
        Objects.equals(this.code, vatsummarydefinition.code) &&
        Objects.equals(this.description, vatsummarydefinition.description) &&
        Objects.equals(this.countryID, vatsummarydefinition.countryID) &&
        Objects.equals(this.prefillExpressions, vatsummarydefinition.prefillExpressions) &&
        Objects.equals(this.closingKind, vatsummarydefinition.closingKind) &&
        Objects.equals(this.closingKindAsText, vatsummarydefinition.closingKindAsText) &&
        Objects.equals(this.notForVATClosing, vatsummarydefinition.notForVATClosing);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayName, ID, classID, objVersion, rows, hidden, code, description, countryID, prefillExpressions, closingKind, closingKindAsText, notForVATClosing);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Vatsummarydefinition {\n");
    
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
    sb.append("    classID: ").append(toIndentedString(classID)).append("\n");
    sb.append("    objVersion: ").append(toIndentedString(objVersion)).append("\n");
    sb.append("    rows: ").append(toIndentedString(rows)).append("\n");
    sb.append("    hidden: ").append(toIndentedString(hidden)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    countryID: ").append(toIndentedString(countryID)).append("\n");
    sb.append("    prefillExpressions: ").append(toIndentedString(prefillExpressions)).append("\n");
    sb.append("    closingKind: ").append(toIndentedString(closingKind)).append("\n");
    sb.append("    closingKindAsText: ").append(toIndentedString(closingKindAsText)).append("\n");
    sb.append("    notForVATClosing: ").append(toIndentedString(notForVATClosing)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

