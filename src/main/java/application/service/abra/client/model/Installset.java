/**
 * abra gen web api (spojení testapi)
 * webové api systému 17.03.03
 *
 * OpenAPI spec version: 17.03.03
 * Contact: abragen@abra.eu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package application.service.abra.client.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;


/**
 * Installset
 */
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2017-03-29T11:52:08.096+02:00")
public class Installset   {
  @SerializedName("displayname")
  private String displayname = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("classid")
  private String classid = null;

  @SerializedName("objversion")
  private Integer objversion = null;

  @SerializedName("rows")
  private List<Installsetsrow> rows = new ArrayList<Installsetsrow>();

  @SerializedName("name")
  private String name = null;

  @SerializedName("importnotestart")
  private String importnotestart = null;

  @SerializedName("importnotefinish")
  private String importnotefinish = null;

  @SerializedName("systemversion")
  private String systemversion = null;

  @SerializedName("versionsupport")
  private Boolean versionsupport = null;

  @SerializedName("versions")
  private List<Installsetversion> versions = new ArrayList<Installsetversion>();

  @SerializedName("advancedoption")
  private Boolean advancedoption = null;

  @SerializedName("currentversion")
  private Integer currentversion = null;

  @SerializedName("needsynchronize")
  private Boolean needsynchronize = null;

  @SerializedName("neednewversion")
  private Boolean neednewversion = null;

  public Installset displayname(String displayname) {
    this.displayname = displayname;
    return this;
  }

   /**
   * název
   * @return displayname
  **/
  @ApiModelProperty(example = "null", value = "název")
  public String getDisplayname() {
    return displayname;
  }

  public void setDisplayname(String displayname) {
    this.displayname = displayname;
  }

  public Installset id(String id) {
    this.id = id;
    return this;
  }

   /**
   * vlastní id [persistentní položka]
   * @return id
  **/
  @ApiModelProperty(example = "null", value = "vlastní id [persistentní položka]")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public Installset classid(String classid) {
    this.classid = classid;
    return this;
  }

   /**
   * id třídy
   * @return classid
  **/
  @ApiModelProperty(example = "null", value = "id třídy")
  public String getClassid() {
    return classid;
  }

  public void setClassid(String classid) {
    this.classid = classid;
  }

  public Installset objversion(Integer objversion) {
    this.objversion = objversion;
    return this;
  }

   /**
   * verze objektu [persistentní položka]
   * @return objversion
  **/
  @ApiModelProperty(example = "null", value = "verze objektu [persistentní položka]")
  public Integer getObjversion() {
    return objversion;
  }

  public void setObjversion(Integer objversion) {
    this.objversion = objversion;
  }

  public Installset rows(List<Installsetsrow> rows) {
    this.rows = rows;
    return this;
  }

  public Installset addRowsItem(Installsetsrow rowsItem) {
    this.rows.add(rowsItem);
    return this;
  }

   /**
   * Řádky; kolekce bo instalační sada - řádek [nepersistentní položka]
   * @return rows
  **/
  @ApiModelProperty(example = "null", value = "Řádky; kolekce bo instalační sada - řádek [nepersistentní položka]")
  public List<Installsetsrow> getRows() {
    return rows;
  }

  public void setRows(List<Installsetsrow> rows) {
    this.rows = rows;
  }

  public Installset name(String name) {
    this.name = name;
    return this;
  }

   /**
   * název [persistentní položka]
   * @return name
  **/
  @ApiModelProperty(example = "null", value = "název [persistentní položka]")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Installset importnotestart(String importnotestart) {
    this.importnotestart = importnotestart;
    return this;
  }

   /**
   * poznámka k zahájení importu [persistentní položka]
   * @return importnotestart
  **/
  @ApiModelProperty(example = "null", value = "poznámka k zahájení importu [persistentní položka]")
  public String getImportnotestart() {
    return importnotestart;
  }

  public void setImportnotestart(String importnotestart) {
    this.importnotestart = importnotestart;
  }

  public Installset importnotefinish(String importnotefinish) {
    this.importnotefinish = importnotefinish;
    return this;
  }

   /**
   * poznámka k ukončení importu [persistentní položka]
   * @return importnotefinish
  **/
  @ApiModelProperty(example = "null", value = "poznámka k ukončení importu [persistentní položka]")
  public String getImportnotefinish() {
    return importnotefinish;
  }

  public void setImportnotefinish(String importnotefinish) {
    this.importnotefinish = importnotefinish;
  }

  public Installset systemversion(String systemversion) {
    this.systemversion = systemversion;
    return this;
  }

   /**
   * verze abry [persistentní položka]
   * @return systemversion
  **/
  @ApiModelProperty(example = "null", value = "verze abry [persistentní položka]")
  public String getSystemversion() {
    return systemversion;
  }

  public void setSystemversion(String systemversion) {
    this.systemversion = systemversion;
  }

  public Installset versionsupport(Boolean versionsupport) {
    this.versionsupport = versionsupport;
    return this;
  }

   /**
   * podpora verzí [persistentní položka]
   * @return versionsupport
  **/
  @ApiModelProperty(example = "null", value = "podpora verzí [persistentní položka]")
  public Boolean getVersionsupport() {
    return versionsupport;
  }

  public void setVersionsupport(Boolean versionsupport) {
    this.versionsupport = versionsupport;
  }

  public Installset versions(List<Installsetversion> versions) {
    this.versions = versions;
    return this;
  }

  public Installset addVersionsItem(Installsetversion versionsItem) {
    this.versions.add(versionsItem);
    return this;
  }

   /**
   * verze; kolekce bo verze instalační sady [nepersistentní položka]
   * @return versions
  **/
  @ApiModelProperty(example = "null", value = "verze; kolekce bo verze instalační sady [nepersistentní položka]")
  public List<Installsetversion> getVersions() {
    return versions;
  }

  public void setVersions(List<Installsetversion> versions) {
    this.versions = versions;
  }

  public Installset advancedoption(Boolean advancedoption) {
    this.advancedoption = advancedoption;
    return this;
  }

   /**
   * rozšířené zobrazení [persistentní položka]
   * @return advancedoption
  **/
  @ApiModelProperty(example = "null", value = "rozšířené zobrazení [persistentní položka]")
  public Boolean getAdvancedoption() {
    return advancedoption;
  }

  public void setAdvancedoption(Boolean advancedoption) {
    this.advancedoption = advancedoption;
  }

  public Installset currentversion(Integer currentversion) {
    this.currentversion = currentversion;
    return this;
  }

   /**
   * aktuální verze
   * @return currentversion
  **/
  @ApiModelProperty(example = "null", value = "aktuální verze")
  public Integer getCurrentversion() {
    return currentversion;
  }

  public void setCurrentversion(Integer currentversion) {
    this.currentversion = currentversion;
  }

  public Installset needsynchronize(Boolean needsynchronize) {
    this.needsynchronize = needsynchronize;
    return this;
  }

   /**
   * vyžaduje synchronizaci
   * @return needsynchronize
  **/
  @ApiModelProperty(example = "null", value = "vyžaduje synchronizaci")
  public Boolean getNeedsynchronize() {
    return needsynchronize;
  }

  public void setNeedsynchronize(Boolean needsynchronize) {
    this.needsynchronize = needsynchronize;
  }

  public Installset neednewversion(Boolean neednewversion) {
    this.neednewversion = neednewversion;
    return this;
  }

   /**
   * vyžaduje založení nové verze
   * @return neednewversion
  **/
  @ApiModelProperty(example = "null", value = "vyžaduje založení nové verze")
  public Boolean getNeednewversion() {
    return neednewversion;
  }

  public void setNeednewversion(Boolean neednewversion) {
    this.neednewversion = neednewversion;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Installset installset = (Installset) o;
    return Objects.equals(this.displayname, installset.displayname) &&
        Objects.equals(this.id, installset.id) &&
        Objects.equals(this.classid, installset.classid) &&
        Objects.equals(this.objversion, installset.objversion) &&
        Objects.equals(this.rows, installset.rows) &&
        Objects.equals(this.name, installset.name) &&
        Objects.equals(this.importnotestart, installset.importnotestart) &&
        Objects.equals(this.importnotefinish, installset.importnotefinish) &&
        Objects.equals(this.systemversion, installset.systemversion) &&
        Objects.equals(this.versionsupport, installset.versionsupport) &&
        Objects.equals(this.versions, installset.versions) &&
        Objects.equals(this.advancedoption, installset.advancedoption) &&
        Objects.equals(this.currentversion, installset.currentversion) &&
        Objects.equals(this.needsynchronize, installset.needsynchronize) &&
        Objects.equals(this.neednewversion, installset.neednewversion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayname, id, classid, objversion, rows, name, importnotestart, importnotefinish, systemversion, versionsupport, versions, advancedoption, currentversion, needsynchronize, neednewversion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Installset {\n");
    
    sb.append("    displayname: ").append(toIndentedString(displayname)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    classid: ").append(toIndentedString(classid)).append("\n");
    sb.append("    objversion: ").append(toIndentedString(objversion)).append("\n");
    sb.append("    rows: ").append(toIndentedString(rows)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    importnotestart: ").append(toIndentedString(importnotestart)).append("\n");
    sb.append("    importnotefinish: ").append(toIndentedString(importnotefinish)).append("\n");
    sb.append("    systemversion: ").append(toIndentedString(systemversion)).append("\n");
    sb.append("    versionsupport: ").append(toIndentedString(versionsupport)).append("\n");
    sb.append("    versions: ").append(toIndentedString(versions)).append("\n");
    sb.append("    advancedoption: ").append(toIndentedString(advancedoption)).append("\n");
    sb.append("    currentversion: ").append(toIndentedString(currentversion)).append("\n");
    sb.append("    needsynchronize: ").append(toIndentedString(needsynchronize)).append("\n");
    sb.append("    neednewversion: ").append(toIndentedString(neednewversion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

