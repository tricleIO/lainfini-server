/**
 * ABRA Gen Web API (spojení testapi)
 * Webové API systému 17.03.03
 *
 * OpenAPI spec version: 17.03.03
 * Contact: abragen@abra.eu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package application.service.abra.client.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;


/**
 * Installset
 */
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2017-03-26T20:30:15.152+02:00")
public class Installset   {
  @SerializedName("DisplayName")
  private String displayName = null;

  @SerializedName("ID")
  private String ID = null;

  @SerializedName("ClassID")
  private String classID = null;

  @SerializedName("ObjVersion")
  private Integer objVersion = null;

  @SerializedName("Rows")
  private List<Installsetsrow> rows = new ArrayList<Installsetsrow>();

  @SerializedName("Name")
  private String name = null;

  @SerializedName("ImportNoteStart")
  private String importNoteStart = null;

  @SerializedName("ImportNoteFinish")
  private String importNoteFinish = null;

  @SerializedName("SystemVersion")
  private String systemVersion = null;

  @SerializedName("VersionSupport")
  private Boolean versionSupport = null;

  @SerializedName("Versions")
  private List<Installsetversion> versions = new ArrayList<Installsetversion>();

  @SerializedName("AdvancedOption")
  private Boolean advancedOption = null;

  @SerializedName("CurrentVersion")
  private Integer currentVersion = null;

  @SerializedName("NeedSynchronize")
  private Boolean needSynchronize = null;

  @SerializedName("NeedNewVersion")
  private Boolean needNewVersion = null;

   /**
   * Název
   * @return displayName
  **/
  @ApiModelProperty(example = "null", value = "Název")
  public String getDisplayName() {
    return displayName;
  }

   /**
   * Vlastní ID [persistentní položka]
   * @return ID
  **/
  @ApiModelProperty(example = "null", value = "Vlastní ID [persistentní položka]")
  public String getID() {
    return ID;
  }

   /**
   * ID třídy
   * @return classID
  **/
  @ApiModelProperty(example = "null", value = "ID třídy")
  public String getClassID() {
    return classID;
  }

   /**
   * Verze objektu [persistentní položka]
   * @return objVersion
  **/
  @ApiModelProperty(example = "null", value = "Verze objektu [persistentní položka]")
  public Integer getObjVersion() {
    return objVersion;
  }

  public Installset rows(List<Installsetsrow> rows) {
    this.rows = rows;
    return this;
  }

  public Installset addRowsItem(Installsetsrow rowsItem) {
    this.rows.add(rowsItem);
    return this;
  }

   /**
   * Řádky; kolekce BO Instalační sada - řádek [nepersistentní položka]
   * @return rows
  **/
  @ApiModelProperty(example = "null", value = "Řádky; kolekce BO Instalační sada - řádek [nepersistentní položka]")
  public List<Installsetsrow> getRows() {
    return rows;
  }

  public void setRows(List<Installsetsrow> rows) {
    this.rows = rows;
  }

  public Installset name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Název [persistentní položka]
   * @return name
  **/
  @ApiModelProperty(example = "null", value = "Název [persistentní položka]")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Installset importNoteStart(String importNoteStart) {
    this.importNoteStart = importNoteStart;
    return this;
  }

   /**
   * Poznámka k zahájení importu [persistentní položka]
   * @return importNoteStart
  **/
  @ApiModelProperty(example = "null", value = "Poznámka k zahájení importu [persistentní položka]")
  public String getImportNoteStart() {
    return importNoteStart;
  }

  public void setImportNoteStart(String importNoteStart) {
    this.importNoteStart = importNoteStart;
  }

  public Installset importNoteFinish(String importNoteFinish) {
    this.importNoteFinish = importNoteFinish;
    return this;
  }

   /**
   * Poznámka k ukončení importu [persistentní položka]
   * @return importNoteFinish
  **/
  @ApiModelProperty(example = "null", value = "Poznámka k ukončení importu [persistentní položka]")
  public String getImportNoteFinish() {
    return importNoteFinish;
  }

  public void setImportNoteFinish(String importNoteFinish) {
    this.importNoteFinish = importNoteFinish;
  }

  public Installset systemVersion(String systemVersion) {
    this.systemVersion = systemVersion;
    return this;
  }

   /**
   * Verze ABRY [persistentní položka]
   * @return systemVersion
  **/
  @ApiModelProperty(example = "null", value = "Verze ABRY [persistentní položka]")
  public String getSystemVersion() {
    return systemVersion;
  }

  public void setSystemVersion(String systemVersion) {
    this.systemVersion = systemVersion;
  }

  public Installset versionSupport(Boolean versionSupport) {
    this.versionSupport = versionSupport;
    return this;
  }

   /**
   * Podpora verzí [persistentní položka]
   * @return versionSupport
  **/
  @ApiModelProperty(example = "null", value = "Podpora verzí [persistentní položka]")
  public Boolean getVersionSupport() {
    return versionSupport;
  }

  public void setVersionSupport(Boolean versionSupport) {
    this.versionSupport = versionSupport;
  }

  public Installset versions(List<Installsetversion> versions) {
    this.versions = versions;
    return this;
  }

  public Installset addVersionsItem(Installsetversion versionsItem) {
    this.versions.add(versionsItem);
    return this;
  }

   /**
   * Verze; kolekce BO Verze instalační sady [nepersistentní položka]
   * @return versions
  **/
  @ApiModelProperty(example = "null", value = "Verze; kolekce BO Verze instalační sady [nepersistentní položka]")
  public List<Installsetversion> getVersions() {
    return versions;
  }

  public void setVersions(List<Installsetversion> versions) {
    this.versions = versions;
  }

  public Installset advancedOption(Boolean advancedOption) {
    this.advancedOption = advancedOption;
    return this;
  }

   /**
   * Rozšířené zobrazení [persistentní položka]
   * @return advancedOption
  **/
  @ApiModelProperty(example = "null", value = "Rozšířené zobrazení [persistentní položka]")
  public Boolean getAdvancedOption() {
    return advancedOption;
  }

  public void setAdvancedOption(Boolean advancedOption) {
    this.advancedOption = advancedOption;
  }

  public Installset currentVersion(Integer currentVersion) {
    this.currentVersion = currentVersion;
    return this;
  }

   /**
   * Aktuální verze
   * @return currentVersion
  **/
  @ApiModelProperty(example = "null", value = "Aktuální verze")
  public Integer getCurrentVersion() {
    return currentVersion;
  }

  public void setCurrentVersion(Integer currentVersion) {
    this.currentVersion = currentVersion;
  }

  public Installset needSynchronize(Boolean needSynchronize) {
    this.needSynchronize = needSynchronize;
    return this;
  }

   /**
   * Vyžaduje synchronizaci
   * @return needSynchronize
  **/
  @ApiModelProperty(example = "null", value = "Vyžaduje synchronizaci")
  public Boolean getNeedSynchronize() {
    return needSynchronize;
  }

  public void setNeedSynchronize(Boolean needSynchronize) {
    this.needSynchronize = needSynchronize;
  }

  public Installset needNewVersion(Boolean needNewVersion) {
    this.needNewVersion = needNewVersion;
    return this;
  }

   /**
   * Vyžaduje založení nové verze
   * @return needNewVersion
  **/
  @ApiModelProperty(example = "null", value = "Vyžaduje založení nové verze")
  public Boolean getNeedNewVersion() {
    return needNewVersion;
  }

  public void setNeedNewVersion(Boolean needNewVersion) {
    this.needNewVersion = needNewVersion;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Installset installset = (Installset) o;
    return Objects.equals(this.displayName, installset.displayName) &&
        Objects.equals(this.ID, installset.ID) &&
        Objects.equals(this.classID, installset.classID) &&
        Objects.equals(this.objVersion, installset.objVersion) &&
        Objects.equals(this.rows, installset.rows) &&
        Objects.equals(this.name, installset.name) &&
        Objects.equals(this.importNoteStart, installset.importNoteStart) &&
        Objects.equals(this.importNoteFinish, installset.importNoteFinish) &&
        Objects.equals(this.systemVersion, installset.systemVersion) &&
        Objects.equals(this.versionSupport, installset.versionSupport) &&
        Objects.equals(this.versions, installset.versions) &&
        Objects.equals(this.advancedOption, installset.advancedOption) &&
        Objects.equals(this.currentVersion, installset.currentVersion) &&
        Objects.equals(this.needSynchronize, installset.needSynchronize) &&
        Objects.equals(this.needNewVersion, installset.needNewVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayName, ID, classID, objVersion, rows, name, importNoteStart, importNoteFinish, systemVersion, versionSupport, versions, advancedOption, currentVersion, needSynchronize, needNewVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Installset {\n");
    
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
    sb.append("    classID: ").append(toIndentedString(classID)).append("\n");
    sb.append("    objVersion: ").append(toIndentedString(objVersion)).append("\n");
    sb.append("    rows: ").append(toIndentedString(rows)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    importNoteStart: ").append(toIndentedString(importNoteStart)).append("\n");
    sb.append("    importNoteFinish: ").append(toIndentedString(importNoteFinish)).append("\n");
    sb.append("    systemVersion: ").append(toIndentedString(systemVersion)).append("\n");
    sb.append("    versionSupport: ").append(toIndentedString(versionSupport)).append("\n");
    sb.append("    versions: ").append(toIndentedString(versions)).append("\n");
    sb.append("    advancedOption: ").append(toIndentedString(advancedOption)).append("\n");
    sb.append("    currentVersion: ").append(toIndentedString(currentVersion)).append("\n");
    sb.append("    needSynchronize: ").append(toIndentedString(needSynchronize)).append("\n");
    sb.append("    needNewVersion: ").append(toIndentedString(needNewVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

