/**
 * ABRA Gen Web API (spojení testapi)
 * Webové API systému 17.03.03
 *
 * OpenAPI spec version: 17.03.03
 * Contact: abragen@abra.eu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package application.service.abra.client.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;
import org.joda.time.DateTime;

import java.util.Objects;


/**
 * Installsetsrow
 */
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2017-03-26T20:30:15.152+02:00")
public class Installsetsrow   {
  @SerializedName("DisplayName")
  private String displayName = null;

  @SerializedName("ID")
  private String ID = null;

  @SerializedName("ClassID")
  private String classID = null;

  @SerializedName("ObjVersion")
  private Integer objVersion = null;

  @SerializedName("Parent_ID")
  private String parentID = null;

  @SerializedName("ISClassID")
  private String iSClassID = null;

  @SerializedName("Identifier")
  private String identifier = null;

  @SerializedName("Category")
  private String category = null;

  @SerializedName("Note")
  private String note = null;

  @SerializedName("DataInstalled")
  private byte[] dataInstalled = null;

  @SerializedName("DataImported")
  private byte[] dataImported = null;

  @SerializedName("InstalledDataVersion")
  private Integer installedDataVersion = null;

  @SerializedName("InstalationDate$DATE")
  private DateTime instalationDateDATE = null;

  @SerializedName("RedundantFromVersion")
  private Integer redundantFromVersion = null;

  @SerializedName("Exportable")
  private Boolean exportable = null;

  @SerializedName("Name")
  private String name = null;

  @SerializedName("Typ")
  private String typ = null;

  @SerializedName("KindName")
  private String kindName = null;

  @SerializedName("DeleteAndUninstall")
  private Boolean deleteAndUninstall = null;

  @SerializedName("IsInstalled")
  private Boolean isInstalled = null;

   /**
   * Název
   * @return displayName
  **/
  @ApiModelProperty(example = "null", value = "Název")
  public String getDisplayName() {
    return displayName;
  }

   /**
   * Vlastní ID [persistentní položka]
   * @return ID
  **/
  @ApiModelProperty(example = "null", value = "Vlastní ID [persistentní položka]")
  public String getID() {
    return ID;
  }

   /**
   * ID třídy
   * @return classID
  **/
  @ApiModelProperty(example = "null", value = "ID třídy")
  public String getClassID() {
    return classID;
  }

   /**
   * Verze objektu [persistentní položka]
   * @return objVersion
  **/
  @ApiModelProperty(example = "null", value = "Verze objektu [persistentní položka]")
  public Integer getObjVersion() {
    return objVersion;
  }

   /**
   * Vlastník; ID objektu Instalační sada [persistentní položka]
   * @return parentID
  **/
  @ApiModelProperty(example = "null", value = "Vlastník; ID objektu Instalační sada [persistentní položka]")
  public String getParentID() {
    return parentID;
  }

  public Installsetsrow iSClassID(String iSClassID) {
    this.iSClassID = iSClassID;
    return this;
  }

   /**
   * Třída instalační položky [persistentní položka]
   * @return iSClassID
  **/
  @ApiModelProperty(example = "null", value = "Třída instalační položky [persistentní položka]")
  public String getISClassID() {
    return iSClassID;
  }

  public void setISClassID(String iSClassID) {
    this.iSClassID = iSClassID;
  }

  public Installsetsrow identifier(String identifier) {
    this.identifier = identifier;
    return this;
  }

   /**
   * Identifikátor [persistentní položka]
   * @return identifier
  **/
  @ApiModelProperty(example = "null", value = "Identifikátor [persistentní položka]")
  public String getIdentifier() {
    return identifier;
  }

  public void setIdentifier(String identifier) {
    this.identifier = identifier;
  }

  public Installsetsrow category(String category) {
    this.category = category;
    return this;
  }

   /**
   * Kategorie položky instalační sady [persistentní položka]
   * @return category
  **/
  @ApiModelProperty(example = "null", value = "Kategorie položky instalační sady [persistentní položka]")
  public String getCategory() {
    return category;
  }

  public void setCategory(String category) {
    this.category = category;
  }

  public Installsetsrow note(String note) {
    this.note = note;
    return this;
  }

   /**
   * Poznámka [persistentní položka]
   * @return note
  **/
  @ApiModelProperty(example = "null", value = "Poznámka [persistentní položka]")
  public String getNote() {
    return note;
  }

  public void setNote(String note) {
    this.note = note;
  }

  public Installsetsrow dataInstalled(byte[] dataInstalled) {
    this.dataInstalled = dataInstalled;
    return this;
  }

   /**
   * Data položky [persistentní položka]
   * @return dataInstalled
  **/
  @ApiModelProperty(example = "null", value = "Data položky [persistentní položka]")
  public byte[] getDataInstalled() {
    return dataInstalled;
  }

  public void setDataInstalled(byte[] dataInstalled) {
    this.dataInstalled = dataInstalled;
  }

  public Installsetsrow dataImported(byte[] dataImported) {
    this.dataImported = dataImported;
    return this;
  }

   /**
   * Data importovaná z jiné verze sady [persistentní položka]
   * @return dataImported
  **/
  @ApiModelProperty(example = "null", value = "Data importovaná z jiné verze sady [persistentní položka]")
  public byte[] getDataImported() {
    return dataImported;
  }

  public void setDataImported(byte[] dataImported) {
    this.dataImported = dataImported;
  }

  public Installsetsrow installedDataVersion(Integer installedDataVersion) {
    this.installedDataVersion = installedDataVersion;
    return this;
  }

   /**
   * Číslo instalované verze [persistentní položka]
   * @return installedDataVersion
  **/
  @ApiModelProperty(example = "null", value = "Číslo instalované verze [persistentní položka]")
  public Integer getInstalledDataVersion() {
    return installedDataVersion;
  }

  public void setInstalledDataVersion(Integer installedDataVersion) {
    this.installedDataVersion = installedDataVersion;
  }

  public Installsetsrow instalationDateDATE(DateTime instalationDateDATE) {
    this.instalationDateDATE = instalationDateDATE;
    return this;
  }

   /**
   * Datum instalace [persistentní položka]
   * @return instalationDateDATE
  **/
  @ApiModelProperty(example = "null", value = "Datum instalace [persistentní položka]")
  public DateTime getInstalationDateDATE() {
    return instalationDateDATE;
  }

  public void setInstalationDateDATE(DateTime instalationDateDATE) {
    this.instalationDateDATE = instalationDateDATE;
  }

  public Installsetsrow redundantFromVersion(Integer redundantFromVersion) {
    this.redundantFromVersion = redundantFromVersion;
    return this;
  }

   /**
   * Datum odstranění [persistentní položka]
   * @return redundantFromVersion
  **/
  @ApiModelProperty(example = "null", value = "Datum odstranění [persistentní položka]")
  public Integer getRedundantFromVersion() {
    return redundantFromVersion;
  }

  public void setRedundantFromVersion(Integer redundantFromVersion) {
    this.redundantFromVersion = redundantFromVersion;
  }

  public Installsetsrow exportable(Boolean exportable) {
    this.exportable = exportable;
    return this;
  }

   /**
   * Exportovatelná položka [persistentní položka]
   * @return exportable
  **/
  @ApiModelProperty(example = "null", value = "Exportovatelná položka [persistentní položka]")
  public Boolean getExportable() {
    return exportable;
  }

  public void setExportable(Boolean exportable) {
    this.exportable = exportable;
  }

  public Installsetsrow name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Název [persistentní položka]
   * @return name
  **/
  @ApiModelProperty(example = "null", value = "Název [persistentní položka]")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Installsetsrow typ(String typ) {
    this.typ = typ;
    return this;
  }

   /**
   * Typ
   * @return typ
  **/
  @ApiModelProperty(example = "null", value = "Typ")
  public String getTyp() {
    return typ;
  }

  public void setTyp(String typ) {
    this.typ = typ;
  }

  public Installsetsrow kindName(String kindName) {
    this.kindName = kindName;
    return this;
  }

   /**
   * Zařazení [persistentní položka]
   * @return kindName
  **/
  @ApiModelProperty(example = "null", value = "Zařazení [persistentní položka]")
  public String getKindName() {
    return kindName;
  }

  public void setKindName(String kindName) {
    this.kindName = kindName;
  }

  public Installsetsrow deleteAndUninstall(Boolean deleteAndUninstall) {
    this.deleteAndUninstall = deleteAndUninstall;
    return this;
  }

   /**
   * Řádek může být odebrán ze sady
   * @return deleteAndUninstall
  **/
  @ApiModelProperty(example = "null", value = "Řádek může být odebrán ze sady")
  public Boolean getDeleteAndUninstall() {
    return deleteAndUninstall;
  }

  public void setDeleteAndUninstall(Boolean deleteAndUninstall) {
    this.deleteAndUninstall = deleteAndUninstall;
  }

  public Installsetsrow isInstalled(Boolean isInstalled) {
    this.isInstalled = isInstalled;
    return this;
  }

   /**
   * Instalováno
   * @return isInstalled
  **/
  @ApiModelProperty(example = "null", value = "Instalováno")
  public Boolean getIsInstalled() {
    return isInstalled;
  }

  public void setIsInstalled(Boolean isInstalled) {
    this.isInstalled = isInstalled;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Installsetsrow installsetsrow = (Installsetsrow) o;
    return Objects.equals(this.displayName, installsetsrow.displayName) &&
        Objects.equals(this.ID, installsetsrow.ID) &&
        Objects.equals(this.classID, installsetsrow.classID) &&
        Objects.equals(this.objVersion, installsetsrow.objVersion) &&
        Objects.equals(this.parentID, installsetsrow.parentID) &&
        Objects.equals(this.iSClassID, installsetsrow.iSClassID) &&
        Objects.equals(this.identifier, installsetsrow.identifier) &&
        Objects.equals(this.category, installsetsrow.category) &&
        Objects.equals(this.note, installsetsrow.note) &&
        Objects.equals(this.dataInstalled, installsetsrow.dataInstalled) &&
        Objects.equals(this.dataImported, installsetsrow.dataImported) &&
        Objects.equals(this.installedDataVersion, installsetsrow.installedDataVersion) &&
        Objects.equals(this.instalationDateDATE, installsetsrow.instalationDateDATE) &&
        Objects.equals(this.redundantFromVersion, installsetsrow.redundantFromVersion) &&
        Objects.equals(this.exportable, installsetsrow.exportable) &&
        Objects.equals(this.name, installsetsrow.name) &&
        Objects.equals(this.typ, installsetsrow.typ) &&
        Objects.equals(this.kindName, installsetsrow.kindName) &&
        Objects.equals(this.deleteAndUninstall, installsetsrow.deleteAndUninstall) &&
        Objects.equals(this.isInstalled, installsetsrow.isInstalled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayName, ID, classID, objVersion, parentID, iSClassID, identifier, category, note, dataInstalled, dataImported, installedDataVersion, instalationDateDATE, redundantFromVersion, exportable, name, typ, kindName, deleteAndUninstall, isInstalled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Installsetsrow {\n");
    
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
    sb.append("    classID: ").append(toIndentedString(classID)).append("\n");
    sb.append("    objVersion: ").append(toIndentedString(objVersion)).append("\n");
    sb.append("    parentID: ").append(toIndentedString(parentID)).append("\n");
    sb.append("    iSClassID: ").append(toIndentedString(iSClassID)).append("\n");
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    dataInstalled: ").append(toIndentedString(dataInstalled)).append("\n");
    sb.append("    dataImported: ").append(toIndentedString(dataImported)).append("\n");
    sb.append("    installedDataVersion: ").append(toIndentedString(installedDataVersion)).append("\n");
    sb.append("    instalationDateDATE: ").append(toIndentedString(instalationDateDATE)).append("\n");
    sb.append("    redundantFromVersion: ").append(toIndentedString(redundantFromVersion)).append("\n");
    sb.append("    exportable: ").append(toIndentedString(exportable)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    typ: ").append(toIndentedString(typ)).append("\n");
    sb.append("    kindName: ").append(toIndentedString(kindName)).append("\n");
    sb.append("    deleteAndUninstall: ").append(toIndentedString(deleteAndUninstall)).append("\n");
    sb.append("    isInstalled: ").append(toIndentedString(isInstalled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

