/**
 * abra gen web api (spojení testapi)
 * webové api systému 17.03.03
 *
 * OpenAPI spec version: 17.03.03
 * Contact: abragen@abra.eu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package application.service.abra.client.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;

import java.util.Objects;


/**
 * Absencetype
 */
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2017-03-29T11:52:08.096+02:00")
public class Absencetype   {
  @SerializedName("displayname")
  private String displayname = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("classid")
  private String classid = null;

  @SerializedName("objversion")
  private Integer objversion = null;

  @SerializedName("hidden")
  private Boolean hidden = null;

  @SerializedName("code")
  private String code = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("absencebasetype")
  private Integer absencebasetype = null;

  @SerializedName("givecalendardays")
  private Boolean givecalendardays = null;

  @SerializedName("noevidencestate")
  private Boolean noevidencestate = null;

  @SerializedName("nocalculation")
  private Boolean nocalculation = null;

  @SerializedName("extimetype")
  private Integer extimetype = null;

  @SerializedName("paidfreetype")
  private Integer paidfreetype = null;

  @SerializedName("noinsurance")
  private Boolean noinsurance = null;

  @SerializedName("absencebasetypetext")
  private String absencebasetypetext = null;

  @SerializedName("extimetypetext")
  private String extimetypetext = null;

  @SerializedName("paidfreetypetext")
  private String paidfreetypetext = null;

  public Absencetype displayname(String displayname) {
    this.displayname = displayname;
    return this;
  }

   /**
   * název
   * @return displayname
  **/
  @ApiModelProperty(example = "null", value = "název")
  public String getDisplayname() {
    return displayname;
  }

  public void setDisplayname(String displayname) {
    this.displayname = displayname;
  }

  public Absencetype id(String id) {
    this.id = id;
    return this;
  }

   /**
   * vlastní id [persistentní položka]
   * @return id
  **/
  @ApiModelProperty(example = "null", value = "vlastní id [persistentní položka]")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public Absencetype classid(String classid) {
    this.classid = classid;
    return this;
  }

   /**
   * id třídy
   * @return classid
  **/
  @ApiModelProperty(example = "null", value = "id třídy")
  public String getClassid() {
    return classid;
  }

  public void setClassid(String classid) {
    this.classid = classid;
  }

  public Absencetype objversion(Integer objversion) {
    this.objversion = objversion;
    return this;
  }

   /**
   * verze objektu [persistentní položka]
   * @return objversion
  **/
  @ApiModelProperty(example = "null", value = "verze objektu [persistentní položka]")
  public Integer getObjversion() {
    return objversion;
  }

  public void setObjversion(Integer objversion) {
    this.objversion = objversion;
  }

  public Absencetype hidden(Boolean hidden) {
    this.hidden = hidden;
    return this;
  }

   /**
   * skrytý [persistentní položka]
   * @return hidden
  **/
  @ApiModelProperty(example = "null", value = "skrytý [persistentní položka]")
  public Boolean getHidden() {
    return hidden;
  }

  public void setHidden(Boolean hidden) {
    this.hidden = hidden;
  }

  public Absencetype code(String code) {
    this.code = code;
    return this;
  }

   /**
   * kód [persistentní položka]
   * @return code
  **/
  @ApiModelProperty(example = "null", value = "kód [persistentní položka]")
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }

  public Absencetype name(String name) {
    this.name = name;
    return this;
  }

   /**
   * název [persistentní položka]
   * @return name
  **/
  @ApiModelProperty(example = "null", value = "název [persistentní položka]")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Absencetype absencebasetype(Integer absencebasetype) {
    this.absencebasetype = absencebasetype;
    return this;
  }

   /**
   * typ [persistentní položka]
   * @return absencebasetype
  **/
  @ApiModelProperty(example = "null", value = "typ [persistentní položka]")
  public Integer getAbsencebasetype() {
    return absencebasetype;
  }

  public void setAbsencebasetype(Integer absencebasetype) {
    this.absencebasetype = absencebasetype;
  }

  public Absencetype givecalendardays(Boolean givecalendardays) {
    this.givecalendardays = givecalendardays;
    return this;
  }

   /**
   * kal. dny [persistentní položka]
   * @return givecalendardays
  **/
  @ApiModelProperty(example = "null", value = "kal. dny [persistentní položka]")
  public Boolean getGivecalendardays() {
    return givecalendardays;
  }

  public void setGivecalendardays(Boolean givecalendardays) {
    this.givecalendardays = givecalendardays;
  }

  public Absencetype noevidencestate(Boolean noevidencestate) {
    this.noevidencestate = noevidencestate;
    return this;
  }

   /**
   * mimo evid. [persistentní položka]
   * @return noevidencestate
  **/
  @ApiModelProperty(example = "null", value = "mimo evid. [persistentní položka]")
  public Boolean getNoevidencestate() {
    return noevidencestate;
  }

  public void setNoevidencestate(Boolean noevidencestate) {
    this.noevidencestate = noevidencestate;
  }

  public Absencetype nocalculation(Boolean nocalculation) {
    this.nocalculation = nocalculation;
    return this;
  }

   /**
   * bez mzdy [persistentní položka]
   * @return nocalculation
  **/
  @ApiModelProperty(example = "null", value = "bez mzdy [persistentní položka]")
  public Boolean getNocalculation() {
    return nocalculation;
  }

  public void setNocalculation(Boolean nocalculation) {
    this.nocalculation = nocalculation;
  }

  public Absencetype extimetype(Integer extimetype) {
    this.extimetype = extimetype;
    return this;
  }

   /**
   * dlouhodobá nepřít. [persistentní položka]
   * @return extimetype
  **/
  @ApiModelProperty(example = "null", value = "dlouhodobá nepřít. [persistentní položka]")
  public Integer getExtimetype() {
    return extimetype;
  }

  public void setExtimetype(Integer extimetype) {
    this.extimetype = extimetype;
  }

  public Absencetype paidfreetype(Integer paidfreetype) {
    this.paidfreetype = paidfreetype;
    return this;
  }

   /**
   * kat. plac. volna [persistentní položka]
   * @return paidfreetype
  **/
  @ApiModelProperty(example = "null", value = "kat. plac. volna [persistentní položka]")
  public Integer getPaidfreetype() {
    return paidfreetype;
  }

  public void setPaidfreetype(Integer paidfreetype) {
    this.paidfreetype = paidfreetype;
  }

  public Absencetype noinsurance(Boolean noinsurance) {
    this.noinsurance = noinsurance;
    return this;
  }

   /**
   * bez pojištění [persistentní položka]
   * @return noinsurance
  **/
  @ApiModelProperty(example = "null", value = "bez pojištění [persistentní položka]")
  public Boolean getNoinsurance() {
    return noinsurance;
  }

  public void setNoinsurance(Boolean noinsurance) {
    this.noinsurance = noinsurance;
  }

  public Absencetype absencebasetypetext(String absencebasetypetext) {
    this.absencebasetypetext = absencebasetypetext;
    return this;
  }

   /**
   * typ
   * @return absencebasetypetext
  **/
  @ApiModelProperty(example = "null", value = "typ")
  public String getAbsencebasetypetext() {
    return absencebasetypetext;
  }

  public void setAbsencebasetypetext(String absencebasetypetext) {
    this.absencebasetypetext = absencebasetypetext;
  }

  public Absencetype extimetypetext(String extimetypetext) {
    this.extimetypetext = extimetypetext;
    return this;
  }

   /**
   * dlouhodobá nepřít.
   * @return extimetypetext
  **/
  @ApiModelProperty(example = "null", value = "dlouhodobá nepřít.")
  public String getExtimetypetext() {
    return extimetypetext;
  }

  public void setExtimetypetext(String extimetypetext) {
    this.extimetypetext = extimetypetext;
  }

  public Absencetype paidfreetypetext(String paidfreetypetext) {
    this.paidfreetypetext = paidfreetypetext;
    return this;
  }

   /**
   * kat. plac. volna
   * @return paidfreetypetext
  **/
  @ApiModelProperty(example = "null", value = "kat. plac. volna")
  public String getPaidfreetypetext() {
    return paidfreetypetext;
  }

  public void setPaidfreetypetext(String paidfreetypetext) {
    this.paidfreetypetext = paidfreetypetext;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Absencetype absencetype = (Absencetype) o;
    return Objects.equals(this.displayname, absencetype.displayname) &&
        Objects.equals(this.id, absencetype.id) &&
        Objects.equals(this.classid, absencetype.classid) &&
        Objects.equals(this.objversion, absencetype.objversion) &&
        Objects.equals(this.hidden, absencetype.hidden) &&
        Objects.equals(this.code, absencetype.code) &&
        Objects.equals(this.name, absencetype.name) &&
        Objects.equals(this.absencebasetype, absencetype.absencebasetype) &&
        Objects.equals(this.givecalendardays, absencetype.givecalendardays) &&
        Objects.equals(this.noevidencestate, absencetype.noevidencestate) &&
        Objects.equals(this.nocalculation, absencetype.nocalculation) &&
        Objects.equals(this.extimetype, absencetype.extimetype) &&
        Objects.equals(this.paidfreetype, absencetype.paidfreetype) &&
        Objects.equals(this.noinsurance, absencetype.noinsurance) &&
        Objects.equals(this.absencebasetypetext, absencetype.absencebasetypetext) &&
        Objects.equals(this.extimetypetext, absencetype.extimetypetext) &&
        Objects.equals(this.paidfreetypetext, absencetype.paidfreetypetext);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayname, id, classid, objversion, hidden, code, name, absencebasetype, givecalendardays, noevidencestate, nocalculation, extimetype, paidfreetype, noinsurance, absencebasetypetext, extimetypetext, paidfreetypetext);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Absencetype {\n");
    
    sb.append("    displayname: ").append(toIndentedString(displayname)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    classid: ").append(toIndentedString(classid)).append("\n");
    sb.append("    objversion: ").append(toIndentedString(objversion)).append("\n");
    sb.append("    hidden: ").append(toIndentedString(hidden)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    absencebasetype: ").append(toIndentedString(absencebasetype)).append("\n");
    sb.append("    givecalendardays: ").append(toIndentedString(givecalendardays)).append("\n");
    sb.append("    noevidencestate: ").append(toIndentedString(noevidencestate)).append("\n");
    sb.append("    nocalculation: ").append(toIndentedString(nocalculation)).append("\n");
    sb.append("    extimetype: ").append(toIndentedString(extimetype)).append("\n");
    sb.append("    paidfreetype: ").append(toIndentedString(paidfreetype)).append("\n");
    sb.append("    noinsurance: ").append(toIndentedString(noinsurance)).append("\n");
    sb.append("    absencebasetypetext: ").append(toIndentedString(absencebasetypetext)).append("\n");
    sb.append("    extimetypetext: ").append(toIndentedString(extimetypetext)).append("\n");
    sb.append("    paidfreetypetext: ").append(toIndentedString(paidfreetypetext)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

