/**
 * ABRA Gen Web API (spojení testapi)
 * Webové API systému 17.03.03
 *
 * OpenAPI spec version: 17.03.03
 * Contact: abragen@abra.eu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package application.service.abra.client.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;

import java.util.Objects;


/**
 * Emailsmtpaccount
 */
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2017-03-26T20:30:15.152+02:00")
public class Emailsmtpaccount   {
  @SerializedName("DisplayName")
  private String displayName = null;

  @SerializedName("ID")
  private String ID = null;

  @SerializedName("ClassID")
  private String classID = null;

  @SerializedName("ObjVersion")
  private Integer objVersion = null;

  @SerializedName("Hidden")
  private Boolean hidden = null;

  @SerializedName("AccountName")
  private String accountName = null;

  @SerializedName("Server")
  private String server = null;

  @SerializedName("Port")
  private Integer port = null;

  @SerializedName("Login")
  private String login = null;

  @SerializedName("SecPassword")
  private String secPassword = null;

  @SerializedName("Password")
  private String password = null;

  @SerializedName("ConnectionSecurity")
  private Integer connectionSecurity = null;

  @SerializedName("CheckUserRcptLimit")
  private Integer checkUserRcptLimit = null;

  @SerializedName("PauseBetweenSessions")
  private Integer pauseBetweenSessions = null;

   /**
   * Název
   * @return displayName
  **/
  @ApiModelProperty(example = "null", value = "Název")
  public String getDisplayName() {
    return displayName;
  }

   /**
   * Vlastní ID [persistentní položka]
   * @return ID
  **/
  @ApiModelProperty(example = "null", value = "Vlastní ID [persistentní položka]")
  public String getID() {
    return ID;
  }

   /**
   * ID třídy
   * @return classID
  **/
  @ApiModelProperty(example = "null", value = "ID třídy")
  public String getClassID() {
    return classID;
  }

   /**
   * Verze objektu [persistentní položka]
   * @return objVersion
  **/
  @ApiModelProperty(example = "null", value = "Verze objektu [persistentní položka]")
  public Integer getObjVersion() {
    return objVersion;
  }

  public Emailsmtpaccount hidden(Boolean hidden) {
    this.hidden = hidden;
    return this;
  }

   /**
   * Skrytý [persistentní položka]
   * @return hidden
  **/
  @ApiModelProperty(example = "null", value = "Skrytý [persistentní položka]")
  public Boolean getHidden() {
    return hidden;
  }

  public void setHidden(Boolean hidden) {
    this.hidden = hidden;
  }

  public Emailsmtpaccount accountName(String accountName) {
    this.accountName = accountName;
    return this;
  }

   /**
   * Název účtu [persistentní položka]
   * @return accountName
  **/
  @ApiModelProperty(example = "null", value = "Název účtu [persistentní položka]")
  public String getAccountName() {
    return accountName;
  }

  public void setAccountName(String accountName) {
    this.accountName = accountName;
  }

  public Emailsmtpaccount server(String server) {
    this.server = server;
    return this;
  }

   /**
   * SMTP server [persistentní položka]
   * @return server
  **/
  @ApiModelProperty(example = "null", value = "SMTP server [persistentní položka]")
  public String getServer() {
    return server;
  }

  public void setServer(String server) {
    this.server = server;
  }

  public Emailsmtpaccount port(Integer port) {
    this.port = port;
    return this;
  }

   /**
   * Port [persistentní položka]
   * @return port
  **/
  @ApiModelProperty(example = "null", value = "Port [persistentní položka]")
  public Integer getPort() {
    return port;
  }

  public void setPort(Integer port) {
    this.port = port;
  }

  public Emailsmtpaccount login(String login) {
    this.login = login;
    return this;
  }

   /**
   * Přihlašovací jméno [persistentní položka]
   * @return login
  **/
  @ApiModelProperty(example = "null", value = "Přihlašovací jméno [persistentní položka]")
  public String getLogin() {
    return login;
  }

  public void setLogin(String login) {
    this.login = login;
  }

  public Emailsmtpaccount secPassword(String secPassword) {
    this.secPassword = secPassword;
    return this;
  }

   /**
   * Zakódované heslo [persistentní položka]
   * @return secPassword
  **/
  @ApiModelProperty(example = "null", value = "Zakódované heslo [persistentní položka]")
  public String getSecPassword() {
    return secPassword;
  }

  public void setSecPassword(String secPassword) {
    this.secPassword = secPassword;
  }

   /**
   * Heslo
   * @return password
  **/
  @ApiModelProperty(example = "null", value = "Heslo")
  public String getPassword() {
    return password;
  }

  public Emailsmtpaccount connectionSecurity(Integer connectionSecurity) {
    this.connectionSecurity = connectionSecurity;
    return this;
  }

   /**
   * Zabezpečení [persistentní položka]
   * @return connectionSecurity
  **/
  @ApiModelProperty(example = "null", value = "Zabezpečení [persistentní položka]")
  public Integer getConnectionSecurity() {
    return connectionSecurity;
  }

  public void setConnectionSecurity(Integer connectionSecurity) {
    this.connectionSecurity = connectionSecurity;
  }

  public Emailsmtpaccount checkUserRcptLimit(Integer checkUserRcptLimit) {
    this.checkUserRcptLimit = checkUserRcptLimit;
    return this;
  }

   /**
   * Max.počet adresátů v relaci [persistentní položka]
   * @return checkUserRcptLimit
  **/
  @ApiModelProperty(example = "null", value = "Max.počet adresátů v relaci [persistentní položka]")
  public Integer getCheckUserRcptLimit() {
    return checkUserRcptLimit;
  }

  public void setCheckUserRcptLimit(Integer checkUserRcptLimit) {
    this.checkUserRcptLimit = checkUserRcptLimit;
  }

  public Emailsmtpaccount pauseBetweenSessions(Integer pauseBetweenSessions) {
    this.pauseBetweenSessions = pauseBetweenSessions;
    return this;
  }

   /**
   * Časová prodleva mezi relacemi [persistentní položka]
   * @return pauseBetweenSessions
  **/
  @ApiModelProperty(example = "null", value = "Časová prodleva mezi relacemi [persistentní položka]")
  public Integer getPauseBetweenSessions() {
    return pauseBetweenSessions;
  }

  public void setPauseBetweenSessions(Integer pauseBetweenSessions) {
    this.pauseBetweenSessions = pauseBetweenSessions;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Emailsmtpaccount emailsmtpaccount = (Emailsmtpaccount) o;
    return Objects.equals(this.displayName, emailsmtpaccount.displayName) &&
        Objects.equals(this.ID, emailsmtpaccount.ID) &&
        Objects.equals(this.classID, emailsmtpaccount.classID) &&
        Objects.equals(this.objVersion, emailsmtpaccount.objVersion) &&
        Objects.equals(this.hidden, emailsmtpaccount.hidden) &&
        Objects.equals(this.accountName, emailsmtpaccount.accountName) &&
        Objects.equals(this.server, emailsmtpaccount.server) &&
        Objects.equals(this.port, emailsmtpaccount.port) &&
        Objects.equals(this.login, emailsmtpaccount.login) &&
        Objects.equals(this.secPassword, emailsmtpaccount.secPassword) &&
        Objects.equals(this.password, emailsmtpaccount.password) &&
        Objects.equals(this.connectionSecurity, emailsmtpaccount.connectionSecurity) &&
        Objects.equals(this.checkUserRcptLimit, emailsmtpaccount.checkUserRcptLimit) &&
        Objects.equals(this.pauseBetweenSessions, emailsmtpaccount.pauseBetweenSessions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayName, ID, classID, objVersion, hidden, accountName, server, port, login, secPassword, password, connectionSecurity, checkUserRcptLimit, pauseBetweenSessions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Emailsmtpaccount {\n");
    
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
    sb.append("    classID: ").append(toIndentedString(classID)).append("\n");
    sb.append("    objVersion: ").append(toIndentedString(objVersion)).append("\n");
    sb.append("    hidden: ").append(toIndentedString(hidden)).append("\n");
    sb.append("    accountName: ").append(toIndentedString(accountName)).append("\n");
    sb.append("    server: ").append(toIndentedString(server)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    login: ").append(toIndentedString(login)).append("\n");
    sb.append("    secPassword: ").append(toIndentedString(secPassword)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    connectionSecurity: ").append(toIndentedString(connectionSecurity)).append("\n");
    sb.append("    checkUserRcptLimit: ").append(toIndentedString(checkUserRcptLimit)).append("\n");
    sb.append("    pauseBetweenSessions: ").append(toIndentedString(pauseBetweenSessions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

