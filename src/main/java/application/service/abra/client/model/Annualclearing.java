/**
 * abra gen web api (spojení testapi)
 * webové api systému 17.03.03
 *
 * OpenAPI spec version: 17.03.03
 * Contact: abragen@abra.eu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package application.service.abra.client.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;
import org.joda.time.DateTime;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;


/**
 * Annualclearing
 */
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2017-03-29T11:52:08.096+02:00")
public class Annualclearing   {
  @SerializedName("displayname")
  private String displayname = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("classid")
  private String classid = null;

  @SerializedName("objversion")
  private Integer objversion = null;

  @SerializedName("rows")
  private List<Annualclearingrow> rows = new ArrayList<Annualclearingrow>();

  @SerializedName("docqueue_id")
  private String docqueueId = null;

  @SerializedName("period_id")
  private String periodId = null;

  @SerializedName("ordnumber")
  private Integer ordnumber = null;

  @SerializedName("docdate$date")
  private DateTime docdatedate = null;

  @SerializedName("createdby_id")
  private String createdbyId = null;

  @SerializedName("correctedby_id")
  private String correctedbyId = null;

  @SerializedName("newrelatedtype")
  private Integer newrelatedtype = null;

  @SerializedName("newrelateddocument_id")
  private String newrelateddocumentId = null;

  @SerializedName("employee_id")
  private String employeeId = null;

  @SerializedName("yearofclearing")
  private Integer yearofclearing = null;

  @SerializedName("totalcountoffs")
  private Double totalcountoffs = null;

  @SerializedName("totalbases")
  private Double totalbases = null;

  @SerializedName("calculatedtax")
  private Double calculatedtax = null;

  @SerializedName("paidtax")
  private Double paidtax = null;

  @SerializedName("totaltaxbonus")
  private Double totaltaxbonus = null;

  @SerializedName("totaltaxadvantage")
  private Double totaltaxadvantage = null;

  @SerializedName("transferred_id")
  private String transferredId = null;

  @SerializedName("taxbaserounding")
  private Integer taxbaserounding = null;

  @SerializedName("taxrounding")
  private Integer taxrounding = null;

  @SerializedName("dirty")
  private Boolean dirty = null;

  @SerializedName("dateofclosing$date")
  private DateTime dateofclosingdate = null;

  @SerializedName("totaltaxdiscount")
  private Double totaltaxdiscount = null;

  @SerializedName("ignoreminimum")
  private Boolean ignoreminimum = null;

  @SerializedName("transferredastext")
  private String transferredastext = null;

  @SerializedName("decreasedtaxbase")
  private Double decreasedtaxbase = null;

  @SerializedName("overpaid")
  private Double overpaid = null;

  @SerializedName("arrears")
  private Double arrears = null;

  @SerializedName("taxbonusoverpaid")
  private Double taxbonusoverpaid = null;

  @SerializedName("calculatedtaxbonus")
  private Double calculatedtaxbonus = null;

  @SerializedName("annualclearing")
  private Double annualclearing = null;

  @SerializedName("yeartaxbonus")
  private Double yeartaxbonus = null;

  @SerializedName("personalnumber")
  private String personalnumber = null;

  @SerializedName("numpersonalnumber")
  private Integer numpersonalnumber = null;

  @SerializedName("totalincome")
  private Double totalincome = null;

  @SerializedName("totalinsurance")
  private Double totalinsurance = null;

  @SerializedName("employeepremium")
  private Double employeepremium = null;

  @SerializedName("emplpremtablewr")
  private String emplpremtablewr = null;

  @SerializedName("emplpremtableagreement")
  private String emplpremtableagreement = null;

  @SerializedName("emplpremcalc")
  private Boolean emplpremcalc = null;

  @SerializedName("employeepremiumcorrection")
  private Double employeepremiumcorrection = null;

  @SerializedName("healthinsurance")
  private Double healthinsurance = null;

  @SerializedName("socialinsurance")
  private Double socialinsurance = null;

  @SerializedName("iscomputed")
  private Boolean iscomputed = null;

  @SerializedName("taxbonusrefund")
  private Double taxbonusrefund = null;

  @SerializedName("oapenssavingbasecut")
  private Double oapenssavingbasecut = null;

  public Annualclearing displayname(String displayname) {
    this.displayname = displayname;
    return this;
  }

   /**
   * Číslo dok.
   * @return displayname
  **/
  @ApiModelProperty(example = "null", value = "Číslo dok.")
  public String getDisplayname() {
    return displayname;
  }

  public void setDisplayname(String displayname) {
    this.displayname = displayname;
  }

  public Annualclearing id(String id) {
    this.id = id;
    return this;
  }

   /**
   * vlastní id [persistentní položka]
   * @return id
  **/
  @ApiModelProperty(example = "null", value = "vlastní id [persistentní položka]")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public Annualclearing classid(String classid) {
    this.classid = classid;
    return this;
  }

   /**
   * id třídy
   * @return classid
  **/
  @ApiModelProperty(example = "null", value = "id třídy")
  public String getClassid() {
    return classid;
  }

  public void setClassid(String classid) {
    this.classid = classid;
  }

  public Annualclearing objversion(Integer objversion) {
    this.objversion = objversion;
    return this;
  }

   /**
   * verze objektu [persistentní položka]
   * @return objversion
  **/
  @ApiModelProperty(example = "null", value = "verze objektu [persistentní položka]")
  public Integer getObjversion() {
    return objversion;
  }

  public void setObjversion(Integer objversion) {
    this.objversion = objversion;
  }

  public Annualclearing rows(List<Annualclearingrow> rows) {
    this.rows = rows;
    return this;
  }

  public Annualclearing addRowsItem(Annualclearingrow rowsItem) {
    this.rows.add(rowsItem);
    return this;
  }

   /**
   * Řádky; kolekce bo Řádek ročního zúčtování [nepersistentní položka]
   * @return rows
  **/
  @ApiModelProperty(example = "null", value = "Řádky; kolekce bo Řádek ročního zúčtování [nepersistentní položka]")
  public List<Annualclearingrow> getRows() {
    return rows;
  }

  public void setRows(List<Annualclearingrow> rows) {
    this.rows = rows;
  }

  public Annualclearing docqueueId(String docqueueId) {
    this.docqueueId = docqueueId;
    return this;
  }

   /**
   * zdrojová řada; id objektu Řada dokladů [persistentní položka]
   * @return docqueueId
  **/
  @ApiModelProperty(example = "null", value = "zdrojová řada; id objektu Řada dokladů [persistentní položka]")
  public String getDocqueueId() {
    return docqueueId;
  }

  public void setDocqueueId(String docqueueId) {
    this.docqueueId = docqueueId;
  }

  public Annualclearing periodId(String periodId) {
    this.periodId = periodId;
    return this;
  }

   /**
   * období; id objektu období [persistentní položka]
   * @return periodId
  **/
  @ApiModelProperty(example = "null", value = "období; id objektu období [persistentní položka]")
  public String getPeriodId() {
    return periodId;
  }

  public void setPeriodId(String periodId) {
    this.periodId = periodId;
  }

  public Annualclearing ordnumber(Integer ordnumber) {
    this.ordnumber = ordnumber;
    return this;
  }

   /**
   * pořadové číslo [persistentní položka]
   * @return ordnumber
  **/
  @ApiModelProperty(example = "null", value = "pořadové číslo [persistentní položka]")
  public Integer getOrdnumber() {
    return ordnumber;
  }

  public void setOrdnumber(Integer ordnumber) {
    this.ordnumber = ordnumber;
  }

  public Annualclearing docdatedate(DateTime docdatedate) {
    this.docdatedate = docdatedate;
    return this;
  }

   /**
   * datum dok. [persistentní položka]
   * @return docdatedate
  **/
  @ApiModelProperty(example = "null", value = "datum dok. [persistentní položka]")
  public DateTime getDocdatedate() {
    return docdatedate;
  }

  public void setDocdatedate(DateTime docdatedate) {
    this.docdatedate = docdatedate;
  }

  public Annualclearing createdbyId(String createdbyId) {
    this.createdbyId = createdbyId;
    return this;
  }

   /**
   * vytvořil; id objektu uživatel [persistentní položka]
   * @return createdbyId
  **/
  @ApiModelProperty(example = "null", value = "vytvořil; id objektu uživatel [persistentní položka]")
  public String getCreatedbyId() {
    return createdbyId;
  }

  public void setCreatedbyId(String createdbyId) {
    this.createdbyId = createdbyId;
  }

  public Annualclearing correctedbyId(String correctedbyId) {
    this.correctedbyId = correctedbyId;
    return this;
  }

   /**
   * opravil; id objektu uživatel [persistentní položka]
   * @return correctedbyId
  **/
  @ApiModelProperty(example = "null", value = "opravil; id objektu uživatel [persistentní položka]")
  public String getCorrectedbyId() {
    return correctedbyId;
  }

  public void setCorrectedbyId(String correctedbyId) {
    this.correctedbyId = correctedbyId;
  }

  public Annualclearing newrelatedtype(Integer newrelatedtype) {
    this.newrelatedtype = newrelatedtype;
    return this;
  }

   /**
   * typ relace
   * @return newrelatedtype
  **/
  @ApiModelProperty(example = "null", value = "typ relace")
  public Integer getNewrelatedtype() {
    return newrelatedtype;
  }

  public void setNewrelatedtype(Integer newrelatedtype) {
    this.newrelatedtype = newrelatedtype;
  }

  public Annualclearing newrelateddocumentId(String newrelateddocumentId) {
    this.newrelateddocumentId = newrelateddocumentId;
    return this;
  }

   /**
   * id dokladu pro připojení
   * @return newrelateddocumentId
  **/
  @ApiModelProperty(example = "null", value = "id dokladu pro připojení")
  public String getNewrelateddocumentId() {
    return newrelateddocumentId;
  }

  public void setNewrelateddocumentId(String newrelateddocumentId) {
    this.newrelateddocumentId = newrelateddocumentId;
  }

  public Annualclearing employeeId(String employeeId) {
    this.employeeId = employeeId;
    return this;
  }

   /**
   * zaměstnanec; id objektu zaměstnanec [persistentní položka]
   * @return employeeId
  **/
  @ApiModelProperty(example = "null", value = "zaměstnanec; id objektu zaměstnanec [persistentní položka]")
  public String getEmployeeId() {
    return employeeId;
  }

  public void setEmployeeId(String employeeId) {
    this.employeeId = employeeId;
  }

  public Annualclearing yearofclearing(Integer yearofclearing) {
    this.yearofclearing = yearofclearing;
    return this;
  }

   /**
   * rok zúčtování [persistentní položka]
   * @return yearofclearing
  **/
  @ApiModelProperty(example = "null", value = "rok zúčtování [persistentní položka]")
  public Integer getYearofclearing() {
    return yearofclearing;
  }

  public void setYearofclearing(Integer yearofclearing) {
    this.yearofclearing = yearofclearing;
  }

  public Annualclearing totalcountoffs(Double totalcountoffs) {
    this.totalcountoffs = totalcountoffs;
    return this;
  }

   /**
   * celkem odpočty [persistentní položka]
   * @return totalcountoffs
  **/
  @ApiModelProperty(example = "null", value = "celkem odpočty [persistentní položka]")
  public Double getTotalcountoffs() {
    return totalcountoffs;
  }

  public void setTotalcountoffs(Double totalcountoffs) {
    this.totalcountoffs = totalcountoffs;
  }

  public Annualclearing totalbases(Double totalbases) {
    this.totalbases = totalbases;
    return this;
  }

   /**
   * celkem základ [persistentní položka]
   * @return totalbases
  **/
  @ApiModelProperty(example = "null", value = "celkem základ [persistentní položka]")
  public Double getTotalbases() {
    return totalbases;
  }

  public void setTotalbases(Double totalbases) {
    this.totalbases = totalbases;
  }

  public Annualclearing calculatedtax(Double calculatedtax) {
    this.calculatedtax = calculatedtax;
    return this;
  }

   /**
   * vypočtená daň před slevou [persistentní položka]
   * @return calculatedtax
  **/
  @ApiModelProperty(example = "null", value = "vypočtená daň před slevou [persistentní položka]")
  public Double getCalculatedtax() {
    return calculatedtax;
  }

  public void setCalculatedtax(Double calculatedtax) {
    this.calculatedtax = calculatedtax;
  }

  public Annualclearing paidtax(Double paidtax) {
    this.paidtax = paidtax;
    return this;
  }

   /**
   * zaplacené zálohy [persistentní položka]
   * @return paidtax
  **/
  @ApiModelProperty(example = "null", value = "zaplacené zálohy [persistentní položka]")
  public Double getPaidtax() {
    return paidtax;
  }

  public void setPaidtax(Double paidtax) {
    this.paidtax = paidtax;
  }

  public Annualclearing totaltaxbonus(Double totaltaxbonus) {
    this.totaltaxbonus = totaltaxbonus;
    return this;
  }

   /**
   * vyplacený daňový bonus [persistentní položka]
   * @return totaltaxbonus
  **/
  @ApiModelProperty(example = "null", value = "vyplacený daňový bonus [persistentní položka]")
  public Double getTotaltaxbonus() {
    return totaltaxbonus;
  }

  public void setTotaltaxbonus(Double totaltaxbonus) {
    this.totaltaxbonus = totaltaxbonus;
  }

  public Annualclearing totaltaxadvantage(Double totaltaxadvantage) {
    this.totaltaxadvantage = totaltaxadvantage;
    return this;
  }

   /**
   * daňové zvýhodnění [persistentní položka]
   * @return totaltaxadvantage
  **/
  @ApiModelProperty(example = "null", value = "daňové zvýhodnění [persistentní položka]")
  public Double getTotaltaxadvantage() {
    return totaltaxadvantage;
  }

  public void setTotaltaxadvantage(Double totaltaxadvantage) {
    this.totaltaxadvantage = totaltaxadvantage;
  }

  public Annualclearing transferredId(String transferredId) {
    this.transferredId = transferredId;
    return this;
  }

   /**
   * přeneseno do ml; id objektu mzdový list souhrnný [persistentní položka]
   * @return transferredId
  **/
  @ApiModelProperty(example = "null", value = "přeneseno do ml; id objektu mzdový list souhrnný [persistentní položka]")
  public String getTransferredId() {
    return transferredId;
  }

  public void setTransferredId(String transferredId) {
    this.transferredId = transferredId;
  }

  public Annualclearing taxbaserounding(Integer taxbaserounding) {
    this.taxbaserounding = taxbaserounding;
    return this;
  }

   /**
   * zaok.základu [persistentní položka]
   * @return taxbaserounding
  **/
  @ApiModelProperty(example = "null", value = "zaok.základu [persistentní položka]")
  public Integer getTaxbaserounding() {
    return taxbaserounding;
  }

  public void setTaxbaserounding(Integer taxbaserounding) {
    this.taxbaserounding = taxbaserounding;
  }

  public Annualclearing taxrounding(Integer taxrounding) {
    this.taxrounding = taxrounding;
    return this;
  }

   /**
   * zaok.daně [persistentní položka]
   * @return taxrounding
  **/
  @ApiModelProperty(example = "null", value = "zaok.daně [persistentní položka]")
  public Integer getTaxrounding() {
    return taxrounding;
  }

  public void setTaxrounding(Integer taxrounding) {
    this.taxrounding = taxrounding;
  }

  public Annualclearing dirty(Boolean dirty) {
    this.dirty = dirty;
    return this;
  }

   /**
   * cizí doklad [persistentní položka]
   * @return dirty
  **/
  @ApiModelProperty(example = "null", value = "cizí doklad [persistentní položka]")
  public Boolean getDirty() {
    return dirty;
  }

  public void setDirty(Boolean dirty) {
    this.dirty = dirty;
  }

  public Annualclearing dateofclosingdate(DateTime dateofclosingdate) {
    this.dateofclosingdate = dateofclosingdate;
    return this;
  }

   /**
   * datum uzavření [persistentní položka]
   * @return dateofclosingdate
  **/
  @ApiModelProperty(example = "null", value = "datum uzavření [persistentní položka]")
  public DateTime getDateofclosingdate() {
    return dateofclosingdate;
  }

  public void setDateofclosingdate(DateTime dateofclosingdate) {
    this.dateofclosingdate = dateofclosingdate;
  }

  public Annualclearing totaltaxdiscount(Double totaltaxdiscount) {
    this.totaltaxdiscount = totaltaxdiscount;
    return this;
  }

   /**
   * sleva na dani [persistentní položka]
   * @return totaltaxdiscount
  **/
  @ApiModelProperty(example = "null", value = "sleva na dani [persistentní položka]")
  public Double getTotaltaxdiscount() {
    return totaltaxdiscount;
  }

  public void setTotaltaxdiscount(Double totaltaxdiscount) {
    this.totaltaxdiscount = totaltaxdiscount;
  }

  public Annualclearing ignoreminimum(Boolean ignoreminimum) {
    this.ignoreminimum = ignoreminimum;
    return this;
  }

   /**
   * ignoruj minimum [persistentní položka]
   * @return ignoreminimum
  **/
  @ApiModelProperty(example = "null", value = "ignoruj minimum [persistentní položka]")
  public Boolean getIgnoreminimum() {
    return ignoreminimum;
  }

  public void setIgnoreminimum(Boolean ignoreminimum) {
    this.ignoreminimum = ignoreminimum;
  }

  public Annualclearing transferredastext(String transferredastext) {
    this.transferredastext = transferredastext;
    return this;
  }

   /**
   * přeneseno do ml
   * @return transferredastext
  **/
  @ApiModelProperty(example = "null", value = "přeneseno do ml")
  public String getTransferredastext() {
    return transferredastext;
  }

  public void setTransferredastext(String transferredastext) {
    this.transferredastext = transferredastext;
  }

  public Annualclearing decreasedtaxbase(Double decreasedtaxbase) {
    this.decreasedtaxbase = decreasedtaxbase;
    return this;
  }

   /**
   * snížený základ
   * @return decreasedtaxbase
  **/
  @ApiModelProperty(example = "null", value = "snížený základ")
  public Double getDecreasedtaxbase() {
    return decreasedtaxbase;
  }

  public void setDecreasedtaxbase(Double decreasedtaxbase) {
    this.decreasedtaxbase = decreasedtaxbase;
  }

  public Annualclearing overpaid(Double overpaid) {
    this.overpaid = overpaid;
    return this;
  }

   /**
   * přeplatek
   * @return overpaid
  **/
  @ApiModelProperty(example = "null", value = "přeplatek")
  public Double getOverpaid() {
    return overpaid;
  }

  public void setOverpaid(Double overpaid) {
    this.overpaid = overpaid;
  }

  public Annualclearing arrears(Double arrears) {
    this.arrears = arrears;
    return this;
  }

   /**
   * nedoplatek
   * @return arrears
  **/
  @ApiModelProperty(example = "null", value = "nedoplatek")
  public Double getArrears() {
    return arrears;
  }

  public void setArrears(Double arrears) {
    this.arrears = arrears;
  }

  public Annualclearing taxbonusoverpaid(Double taxbonusoverpaid) {
    this.taxbonusoverpaid = taxbonusoverpaid;
    return this;
  }

   /**
   * přeplatek daň. bonusu
   * @return taxbonusoverpaid
  **/
  @ApiModelProperty(example = "null", value = "přeplatek daň. bonusu")
  public Double getTaxbonusoverpaid() {
    return taxbonusoverpaid;
  }

  public void setTaxbonusoverpaid(Double taxbonusoverpaid) {
    this.taxbonusoverpaid = taxbonusoverpaid;
  }

  public Annualclearing calculatedtaxbonus(Double calculatedtaxbonus) {
    this.calculatedtaxbonus = calculatedtaxbonus;
    return this;
  }

   /**
   * spočtený daň. bonus
   * @return calculatedtaxbonus
  **/
  @ApiModelProperty(example = "null", value = "spočtený daň. bonus")
  public Double getCalculatedtaxbonus() {
    return calculatedtaxbonus;
  }

  public void setCalculatedtaxbonus(Double calculatedtaxbonus) {
    this.calculatedtaxbonus = calculatedtaxbonus;
  }

  public Annualclearing annualclearing(Double annualclearing) {
    this.annualclearing = annualclearing;
    return this;
  }

   /**
   * přeplatek na dani
   * @return annualclearing
  **/
  @ApiModelProperty(example = "null", value = "přeplatek na dani")
  public Double getAnnualclearing() {
    return annualclearing;
  }

  public void setAnnualclearing(Double annualclearing) {
    this.annualclearing = annualclearing;
  }

  public Annualclearing yeartaxbonus(Double yeartaxbonus) {
    this.yeartaxbonus = yeartaxbonus;
    return this;
  }

   /**
   * rozdíl na daň. bonusu
   * @return yeartaxbonus
  **/
  @ApiModelProperty(example = "null", value = "rozdíl na daň. bonusu")
  public Double getYeartaxbonus() {
    return yeartaxbonus;
  }

  public void setYeartaxbonus(Double yeartaxbonus) {
    this.yeartaxbonus = yeartaxbonus;
  }

  public Annualclearing personalnumber(String personalnumber) {
    this.personalnumber = personalnumber;
    return this;
  }

   /**
   * os. číslo
   * @return personalnumber
  **/
  @ApiModelProperty(example = "null", value = "os. číslo")
  public String getPersonalnumber() {
    return personalnumber;
  }

  public void setPersonalnumber(String personalnumber) {
    this.personalnumber = personalnumber;
  }

  public Annualclearing numpersonalnumber(Integer numpersonalnumber) {
    this.numpersonalnumber = numpersonalnumber;
    return this;
  }

   /**
   * os.číslo numericky
   * @return numpersonalnumber
  **/
  @ApiModelProperty(example = "null", value = "os.číslo numericky")
  public Integer getNumpersonalnumber() {
    return numpersonalnumber;
  }

  public void setNumpersonalnumber(Integer numpersonalnumber) {
    this.numpersonalnumber = numpersonalnumber;
  }

  public Annualclearing totalincome(Double totalincome) {
    this.totalincome = totalincome;
    return this;
  }

   /**
   * celk.příjem
   * @return totalincome
  **/
  @ApiModelProperty(example = "null", value = "celk.příjem")
  public Double getTotalincome() {
    return totalincome;
  }

  public void setTotalincome(Double totalincome) {
    this.totalincome = totalincome;
  }

  public Annualclearing totalinsurance(Double totalinsurance) {
    this.totalinsurance = totalinsurance;
    return this;
  }

   /**
   * celk.pojistné
   * @return totalinsurance
  **/
  @ApiModelProperty(example = "null", value = "celk.pojistné")
  public Double getTotalinsurance() {
    return totalinsurance;
  }

  public void setTotalinsurance(Double totalinsurance) {
    this.totalinsurance = totalinsurance;
  }

  public Annualclearing employeepremium(Double employeepremium) {
    this.employeepremium = employeepremium;
    return this;
  }

   /**
   * zaměstnanecká prémie
   * @return employeepremium
  **/
  @ApiModelProperty(example = "null", value = "zaměstnanecká prémie")
  public Double getEmployeepremium() {
    return employeepremium;
  }

  public void setEmployeepremium(Double employeepremium) {
    this.employeepremium = employeepremium;
  }

  public Annualclearing emplpremtablewr(String emplpremtablewr) {
    this.emplpremtablewr = emplpremtablewr;
    return this;
  }

   /**
   * měsíce pr.poměrů [persistentní položka]
   * @return emplpremtablewr
  **/
  @ApiModelProperty(example = "null", value = "měsíce pr.poměrů [persistentní položka]")
  public String getEmplpremtablewr() {
    return emplpremtablewr;
  }

  public void setEmplpremtablewr(String emplpremtablewr) {
    this.emplpremtablewr = emplpremtablewr;
  }

  public Annualclearing emplpremtableagreement(String emplpremtableagreement) {
    this.emplpremtableagreement = emplpremtableagreement;
    return this;
  }

   /**
   * měsíce dohod [persistentní položka]
   * @return emplpremtableagreement
  **/
  @ApiModelProperty(example = "null", value = "měsíce dohod [persistentní položka]")
  public String getEmplpremtableagreement() {
    return emplpremtableagreement;
  }

  public void setEmplpremtableagreement(String emplpremtableagreement) {
    this.emplpremtableagreement = emplpremtableagreement;
  }

  public Annualclearing emplpremcalc(Boolean emplpremcalc) {
    this.emplpremcalc = emplpremcalc;
    return this;
  }

   /**
   * počítat zam.prémii [persistentní položka]
   * @return emplpremcalc
  **/
  @ApiModelProperty(example = "null", value = "počítat zam.prémii [persistentní položka]")
  public Boolean getEmplpremcalc() {
    return emplpremcalc;
  }

  public void setEmplpremcalc(Boolean emplpremcalc) {
    this.emplpremcalc = emplpremcalc;
  }

  public Annualclearing employeepremiumcorrection(Double employeepremiumcorrection) {
    this.employeepremiumcorrection = employeepremiumcorrection;
    return this;
  }

   /**
   * zam.prémie - korekce [persistentní položka]
   * @return employeepremiumcorrection
  **/
  @ApiModelProperty(example = "null", value = "zam.prémie - korekce [persistentní položka]")
  public Double getEmployeepremiumcorrection() {
    return employeepremiumcorrection;
  }

  public void setEmployeepremiumcorrection(Double employeepremiumcorrection) {
    this.employeepremiumcorrection = employeepremiumcorrection;
  }

  public Annualclearing healthinsurance(Double healthinsurance) {
    this.healthinsurance = healthinsurance;
    return this;
  }

   /**
   * zdravotní poj.
   * @return healthinsurance
  **/
  @ApiModelProperty(example = "null", value = "zdravotní poj.")
  public Double getHealthinsurance() {
    return healthinsurance;
  }

  public void setHealthinsurance(Double healthinsurance) {
    this.healthinsurance = healthinsurance;
  }

  public Annualclearing socialinsurance(Double socialinsurance) {
    this.socialinsurance = socialinsurance;
    return this;
  }

   /**
   * sociální poj.
   * @return socialinsurance
  **/
  @ApiModelProperty(example = "null", value = "sociální poj.")
  public Double getSocialinsurance() {
    return socialinsurance;
  }

  public void setSocialinsurance(Double socialinsurance) {
    this.socialinsurance = socialinsurance;
  }

  public Annualclearing iscomputed(Boolean iscomputed) {
    this.iscomputed = iscomputed;
    return this;
  }

   /**
   * spočteno [persistentní položka]
   * @return iscomputed
  **/
  @ApiModelProperty(example = "null", value = "spočteno [persistentní položka]")
  public Boolean getIscomputed() {
    return iscomputed;
  }

  public void setIscomputed(Boolean iscomputed) {
    this.iscomputed = iscomputed;
  }

  public Annualclearing taxbonusrefund(Double taxbonusrefund) {
    this.taxbonusrefund = taxbonusrefund;
    return this;
  }

   /**
   * vrácení neopr.vypl. bonusu [persistentní položka]
   * @return taxbonusrefund
  **/
  @ApiModelProperty(example = "null", value = "vrácení neopr.vypl. bonusu [persistentní položka]")
  public Double getTaxbonusrefund() {
    return taxbonusrefund;
  }

  public void setTaxbonusrefund(Double taxbonusrefund) {
    this.taxbonusrefund = taxbonusrefund;
  }

  public Annualclearing oapenssavingbasecut(Double oapenssavingbasecut) {
    this.oapenssavingbasecut = oapenssavingbasecut;
    return this;
  }

   /**
   * sds uplatněné do základu daně [persistentní položka]
   * @return oapenssavingbasecut
  **/
  @ApiModelProperty(example = "null", value = "sds uplatněné do základu daně [persistentní položka]")
  public Double getOapenssavingbasecut() {
    return oapenssavingbasecut;
  }

  public void setOapenssavingbasecut(Double oapenssavingbasecut) {
    this.oapenssavingbasecut = oapenssavingbasecut;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Annualclearing annualclearing = (Annualclearing) o;
    return Objects.equals(this.displayname, annualclearing.displayname) &&
        Objects.equals(this.id, annualclearing.id) &&
        Objects.equals(this.classid, annualclearing.classid) &&
        Objects.equals(this.objversion, annualclearing.objversion) &&
        Objects.equals(this.rows, annualclearing.rows) &&
        Objects.equals(this.docqueueId, annualclearing.docqueueId) &&
        Objects.equals(this.periodId, annualclearing.periodId) &&
        Objects.equals(this.ordnumber, annualclearing.ordnumber) &&
        Objects.equals(this.docdatedate, annualclearing.docdatedate) &&
        Objects.equals(this.createdbyId, annualclearing.createdbyId) &&
        Objects.equals(this.correctedbyId, annualclearing.correctedbyId) &&
        Objects.equals(this.newrelatedtype, annualclearing.newrelatedtype) &&
        Objects.equals(this.newrelateddocumentId, annualclearing.newrelateddocumentId) &&
        Objects.equals(this.employeeId, annualclearing.employeeId) &&
        Objects.equals(this.yearofclearing, annualclearing.yearofclearing) &&
        Objects.equals(this.totalcountoffs, annualclearing.totalcountoffs) &&
        Objects.equals(this.totalbases, annualclearing.totalbases) &&
        Objects.equals(this.calculatedtax, annualclearing.calculatedtax) &&
        Objects.equals(this.paidtax, annualclearing.paidtax) &&
        Objects.equals(this.totaltaxbonus, annualclearing.totaltaxbonus) &&
        Objects.equals(this.totaltaxadvantage, annualclearing.totaltaxadvantage) &&
        Objects.equals(this.transferredId, annualclearing.transferredId) &&
        Objects.equals(this.taxbaserounding, annualclearing.taxbaserounding) &&
        Objects.equals(this.taxrounding, annualclearing.taxrounding) &&
        Objects.equals(this.dirty, annualclearing.dirty) &&
        Objects.equals(this.dateofclosingdate, annualclearing.dateofclosingdate) &&
        Objects.equals(this.totaltaxdiscount, annualclearing.totaltaxdiscount) &&
        Objects.equals(this.ignoreminimum, annualclearing.ignoreminimum) &&
        Objects.equals(this.transferredastext, annualclearing.transferredastext) &&
        Objects.equals(this.decreasedtaxbase, annualclearing.decreasedtaxbase) &&
        Objects.equals(this.overpaid, annualclearing.overpaid) &&
        Objects.equals(this.arrears, annualclearing.arrears) &&
        Objects.equals(this.taxbonusoverpaid, annualclearing.taxbonusoverpaid) &&
        Objects.equals(this.calculatedtaxbonus, annualclearing.calculatedtaxbonus) &&
        Objects.equals(this.annualclearing, annualclearing.annualclearing) &&
        Objects.equals(this.yeartaxbonus, annualclearing.yeartaxbonus) &&
        Objects.equals(this.personalnumber, annualclearing.personalnumber) &&
        Objects.equals(this.numpersonalnumber, annualclearing.numpersonalnumber) &&
        Objects.equals(this.totalincome, annualclearing.totalincome) &&
        Objects.equals(this.totalinsurance, annualclearing.totalinsurance) &&
        Objects.equals(this.employeepremium, annualclearing.employeepremium) &&
        Objects.equals(this.emplpremtablewr, annualclearing.emplpremtablewr) &&
        Objects.equals(this.emplpremtableagreement, annualclearing.emplpremtableagreement) &&
        Objects.equals(this.emplpremcalc, annualclearing.emplpremcalc) &&
        Objects.equals(this.employeepremiumcorrection, annualclearing.employeepremiumcorrection) &&
        Objects.equals(this.healthinsurance, annualclearing.healthinsurance) &&
        Objects.equals(this.socialinsurance, annualclearing.socialinsurance) &&
        Objects.equals(this.iscomputed, annualclearing.iscomputed) &&
        Objects.equals(this.taxbonusrefund, annualclearing.taxbonusrefund) &&
        Objects.equals(this.oapenssavingbasecut, annualclearing.oapenssavingbasecut);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayname, id, classid, objversion, rows, docqueueId, periodId, ordnumber, docdatedate, createdbyId, correctedbyId, newrelatedtype, newrelateddocumentId, employeeId, yearofclearing, totalcountoffs, totalbases, calculatedtax, paidtax, totaltaxbonus, totaltaxadvantage, transferredId, taxbaserounding, taxrounding, dirty, dateofclosingdate, totaltaxdiscount, ignoreminimum, transferredastext, decreasedtaxbase, overpaid, arrears, taxbonusoverpaid, calculatedtaxbonus, annualclearing, yeartaxbonus, personalnumber, numpersonalnumber, totalincome, totalinsurance, employeepremium, emplpremtablewr, emplpremtableagreement, emplpremcalc, employeepremiumcorrection, healthinsurance, socialinsurance, iscomputed, taxbonusrefund, oapenssavingbasecut);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Annualclearing {\n");
    
    sb.append("    displayname: ").append(toIndentedString(displayname)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    classid: ").append(toIndentedString(classid)).append("\n");
    sb.append("    objversion: ").append(toIndentedString(objversion)).append("\n");
    sb.append("    rows: ").append(toIndentedString(rows)).append("\n");
    sb.append("    docqueueId: ").append(toIndentedString(docqueueId)).append("\n");
    sb.append("    periodId: ").append(toIndentedString(periodId)).append("\n");
    sb.append("    ordnumber: ").append(toIndentedString(ordnumber)).append("\n");
    sb.append("    docdatedate: ").append(toIndentedString(docdatedate)).append("\n");
    sb.append("    createdbyId: ").append(toIndentedString(createdbyId)).append("\n");
    sb.append("    correctedbyId: ").append(toIndentedString(correctedbyId)).append("\n");
    sb.append("    newrelatedtype: ").append(toIndentedString(newrelatedtype)).append("\n");
    sb.append("    newrelateddocumentId: ").append(toIndentedString(newrelateddocumentId)).append("\n");
    sb.append("    employeeId: ").append(toIndentedString(employeeId)).append("\n");
    sb.append("    yearofclearing: ").append(toIndentedString(yearofclearing)).append("\n");
    sb.append("    totalcountoffs: ").append(toIndentedString(totalcountoffs)).append("\n");
    sb.append("    totalbases: ").append(toIndentedString(totalbases)).append("\n");
    sb.append("    calculatedtax: ").append(toIndentedString(calculatedtax)).append("\n");
    sb.append("    paidtax: ").append(toIndentedString(paidtax)).append("\n");
    sb.append("    totaltaxbonus: ").append(toIndentedString(totaltaxbonus)).append("\n");
    sb.append("    totaltaxadvantage: ").append(toIndentedString(totaltaxadvantage)).append("\n");
    sb.append("    transferredId: ").append(toIndentedString(transferredId)).append("\n");
    sb.append("    taxbaserounding: ").append(toIndentedString(taxbaserounding)).append("\n");
    sb.append("    taxrounding: ").append(toIndentedString(taxrounding)).append("\n");
    sb.append("    dirty: ").append(toIndentedString(dirty)).append("\n");
    sb.append("    dateofclosingdate: ").append(toIndentedString(dateofclosingdate)).append("\n");
    sb.append("    totaltaxdiscount: ").append(toIndentedString(totaltaxdiscount)).append("\n");
    sb.append("    ignoreminimum: ").append(toIndentedString(ignoreminimum)).append("\n");
    sb.append("    transferredastext: ").append(toIndentedString(transferredastext)).append("\n");
    sb.append("    decreasedtaxbase: ").append(toIndentedString(decreasedtaxbase)).append("\n");
    sb.append("    overpaid: ").append(toIndentedString(overpaid)).append("\n");
    sb.append("    arrears: ").append(toIndentedString(arrears)).append("\n");
    sb.append("    taxbonusoverpaid: ").append(toIndentedString(taxbonusoverpaid)).append("\n");
    sb.append("    calculatedtaxbonus: ").append(toIndentedString(calculatedtaxbonus)).append("\n");
    sb.append("    annualclearing: ").append(toIndentedString(annualclearing)).append("\n");
    sb.append("    yeartaxbonus: ").append(toIndentedString(yeartaxbonus)).append("\n");
    sb.append("    personalnumber: ").append(toIndentedString(personalnumber)).append("\n");
    sb.append("    numpersonalnumber: ").append(toIndentedString(numpersonalnumber)).append("\n");
    sb.append("    totalincome: ").append(toIndentedString(totalincome)).append("\n");
    sb.append("    totalinsurance: ").append(toIndentedString(totalinsurance)).append("\n");
    sb.append("    employeepremium: ").append(toIndentedString(employeepremium)).append("\n");
    sb.append("    emplpremtablewr: ").append(toIndentedString(emplpremtablewr)).append("\n");
    sb.append("    emplpremtableagreement: ").append(toIndentedString(emplpremtableagreement)).append("\n");
    sb.append("    emplpremcalc: ").append(toIndentedString(emplpremcalc)).append("\n");
    sb.append("    employeepremiumcorrection: ").append(toIndentedString(employeepremiumcorrection)).append("\n");
    sb.append("    healthinsurance: ").append(toIndentedString(healthinsurance)).append("\n");
    sb.append("    socialinsurance: ").append(toIndentedString(socialinsurance)).append("\n");
    sb.append("    iscomputed: ").append(toIndentedString(iscomputed)).append("\n");
    sb.append("    taxbonusrefund: ").append(toIndentedString(taxbonusrefund)).append("\n");
    sb.append("    oapenssavingbasecut: ").append(toIndentedString(oapenssavingbasecut)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

