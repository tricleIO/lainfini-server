/**
 * ABRA Gen Web API (spojení testapi)
 * Webové API systému 17.03.03
 *
 * OpenAPI spec version: 17.03.03
 * Contact: abragen@abra.eu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package application.service.abra.client.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;
import org.joda.time.DateTime;

import java.util.Objects;


/**
 * Documentdata
 */
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2017-03-26T20:30:15.152+02:00")
public class Documentdata   {
  @SerializedName("DisplayName")
  private String displayName = null;

  @SerializedName("ID")
  private String ID = null;

  @SerializedName("ClassID")
  private String classID = null;

  @SerializedName("ObjVersion")
  private Integer objVersion = null;

  @SerializedName("Revided_ID")
  private String revidedID = null;

  @SerializedName("RevisionDescription")
  private String revisionDescription = null;

  @SerializedName("RevisionDate$DATE")
  private DateTime revisionDateDATE = null;

  @SerializedName("RevisionAuthor_ID")
  private String revisionAuthorID = null;

  @SerializedName("Revision")
  private Integer revision = null;

  @SerializedName("BlobData")
  private byte[] blobData = null;

  @SerializedName("Compressed")
  private Boolean compressed = null;

  @SerializedName("OriginalSize")
  private Integer originalSize = null;

  @SerializedName("CompressedSize")
  private Integer compressedSize = null;

   /**
   * Název
   * @return displayName
  **/
  @ApiModelProperty(example = "null", value = "Název")
  public String getDisplayName() {
    return displayName;
  }

   /**
   * Vlastní ID [persistentní položka]
   * @return ID
  **/
  @ApiModelProperty(example = "null", value = "Vlastní ID [persistentní položka]")
  public String getID() {
    return ID;
  }

   /**
   * ID třídy
   * @return classID
  **/
  @ApiModelProperty(example = "null", value = "ID třídy")
  public String getClassID() {
    return classID;
  }

   /**
   * Verze objektu [persistentní položka]
   * @return objVersion
  **/
  @ApiModelProperty(example = "null", value = "Verze objektu [persistentní položka]")
  public Integer getObjVersion() {
    return objVersion;
  }

   /**
   * ID revidovaného objektu; ID objektu Data dokumentu
   * @return revidedID
  **/
  @ApiModelProperty(example = "null", value = "ID revidovaného objektu; ID objektu Data dokumentu")
  public String getRevidedID() {
    return revidedID;
  }

   /**
   * Popis revize
   * @return revisionDescription
  **/
  @ApiModelProperty(example = "null", value = "Popis revize")
  public String getRevisionDescription() {
    return revisionDescription;
  }

   /**
   * Datum revize
   * @return revisionDateDATE
  **/
  @ApiModelProperty(example = "null", value = "Datum revize")
  public DateTime getRevisionDateDATE() {
    return revisionDateDATE;
  }

   /**
   * Autor revize; ID objektu Uživatel
   * @return revisionAuthorID
  **/
  @ApiModelProperty(example = "null", value = "Autor revize; ID objektu Uživatel")
  public String getRevisionAuthorID() {
    return revisionAuthorID;
  }

   /**
   * Číslo revize
   * @return revision
  **/
  @ApiModelProperty(example = "null", value = "Číslo revize")
  public Integer getRevision() {
    return revision;
  }

  public Documentdata blobData(byte[] blobData) {
    this.blobData = blobData;
    return this;
  }

   /**
   * Data [persistentní položka]
   * @return blobData
  **/
  @ApiModelProperty(example = "null", value = "Data [persistentní položka]")
  public byte[] getBlobData() {
    return blobData;
  }

  public void setBlobData(byte[] blobData) {
    this.blobData = blobData;
  }

  public Documentdata compressed(Boolean compressed) {
    this.compressed = compressed;
    return this;
  }

   /**
   * Komprimován [persistentní položka]
   * @return compressed
  **/
  @ApiModelProperty(example = "null", value = "Komprimován [persistentní položka]")
  public Boolean getCompressed() {
    return compressed;
  }

  public void setCompressed(Boolean compressed) {
    this.compressed = compressed;
  }

  public Documentdata originalSize(Integer originalSize) {
    this.originalSize = originalSize;
    return this;
  }

   /**
   * Původní velikost [persistentní položka]
   * @return originalSize
  **/
  @ApiModelProperty(example = "null", value = "Původní velikost [persistentní položka]")
  public Integer getOriginalSize() {
    return originalSize;
  }

  public void setOriginalSize(Integer originalSize) {
    this.originalSize = originalSize;
  }

  public Documentdata compressedSize(Integer compressedSize) {
    this.compressedSize = compressedSize;
    return this;
  }

   /**
   * Komprimovaná velikost [persistentní položka]
   * @return compressedSize
  **/
  @ApiModelProperty(example = "null", value = "Komprimovaná velikost [persistentní položka]")
  public Integer getCompressedSize() {
    return compressedSize;
  }

  public void setCompressedSize(Integer compressedSize) {
    this.compressedSize = compressedSize;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Documentdata documentdata = (Documentdata) o;
    return Objects.equals(this.displayName, documentdata.displayName) &&
        Objects.equals(this.ID, documentdata.ID) &&
        Objects.equals(this.classID, documentdata.classID) &&
        Objects.equals(this.objVersion, documentdata.objVersion) &&
        Objects.equals(this.revidedID, documentdata.revidedID) &&
        Objects.equals(this.revisionDescription, documentdata.revisionDescription) &&
        Objects.equals(this.revisionDateDATE, documentdata.revisionDateDATE) &&
        Objects.equals(this.revisionAuthorID, documentdata.revisionAuthorID) &&
        Objects.equals(this.revision, documentdata.revision) &&
        Objects.equals(this.blobData, documentdata.blobData) &&
        Objects.equals(this.compressed, documentdata.compressed) &&
        Objects.equals(this.originalSize, documentdata.originalSize) &&
        Objects.equals(this.compressedSize, documentdata.compressedSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayName, ID, classID, objVersion, revidedID, revisionDescription, revisionDateDATE, revisionAuthorID, revision, blobData, compressed, originalSize, compressedSize);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Documentdata {\n");
    
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
    sb.append("    classID: ").append(toIndentedString(classID)).append("\n");
    sb.append("    objVersion: ").append(toIndentedString(objVersion)).append("\n");
    sb.append("    revidedID: ").append(toIndentedString(revidedID)).append("\n");
    sb.append("    revisionDescription: ").append(toIndentedString(revisionDescription)).append("\n");
    sb.append("    revisionDateDATE: ").append(toIndentedString(revisionDateDATE)).append("\n");
    sb.append("    revisionAuthorID: ").append(toIndentedString(revisionAuthorID)).append("\n");
    sb.append("    revision: ").append(toIndentedString(revision)).append("\n");
    sb.append("    blobData: ").append(toIndentedString(blobData)).append("\n");
    sb.append("    compressed: ").append(toIndentedString(compressed)).append("\n");
    sb.append("    originalSize: ").append(toIndentedString(originalSize)).append("\n");
    sb.append("    compressedSize: ").append(toIndentedString(compressedSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

