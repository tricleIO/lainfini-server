/**
 * ABRA Gen Web API (spojení testapi)
 * Webové API systému 17.03.03
 *
 * OpenAPI spec version: 17.03.03
 * Contact: abragen@abra.eu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package application.service.abra.client.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;


/**
 * Scriptpackage
 */
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2017-03-26T20:30:15.152+02:00")
public class Scriptpackage   {
  @SerializedName("DisplayName")
  private String displayName = null;

  @SerializedName("ID")
  private String ID = null;

  @SerializedName("ClassID")
  private String classID = null;

  @SerializedName("ObjVersion")
  private Integer objVersion = null;

  @SerializedName("Rows")
  private List<Scriptpackagerow> rows = new ArrayList<Scriptpackagerow>();

  @SerializedName("Name")
  private String name = null;

  @SerializedName("Description")
  private String description = null;

  @SerializedName("Compiled")
  private Boolean compiled = null;

  @SerializedName("UsageState")
  private Integer usageState = null;

  @SerializedName("RunOrder")
  private Integer runOrder = null;

  @SerializedName("WithoutSources")
  private Boolean withoutSources = null;

  @SerializedName("CreatedBy_ID")
  private String createdByID = null;

  @SerializedName("CorrectedBy_ID")
  private String correctedByID = null;

  @SerializedName("Note")
  private String note = null;

  @SerializedName("HashPassword")
  private String hashPassword = null;

  @SerializedName("CryptForExport")
  private Boolean cryptForExport = null;

  @SerializedName("CompileOnSave")
  private Boolean compileOnSave = null;

   /**
   * Název
   * @return displayName
  **/
  @ApiModelProperty(example = "null", value = "Název")
  public String getDisplayName() {
    return displayName;
  }

   /**
   * Vlastní ID [persistentní položka]
   * @return ID
  **/
  @ApiModelProperty(example = "null", value = "Vlastní ID [persistentní položka]")
  public String getID() {
    return ID;
  }

   /**
   * ID třídy
   * @return classID
  **/
  @ApiModelProperty(example = "null", value = "ID třídy")
  public String getClassID() {
    return classID;
  }

   /**
   * Verze objektu [persistentní položka]
   * @return objVersion
  **/
  @ApiModelProperty(example = "null", value = "Verze objektu [persistentní položka]")
  public Integer getObjVersion() {
    return objVersion;
  }

  public Scriptpackage rows(List<Scriptpackagerow> rows) {
    this.rows = rows;
    return this;
  }

  public Scriptpackage addRowsItem(Scriptpackagerow rowsItem) {
    this.rows.add(rowsItem);
    return this;
  }

   /**
   * Řádky; kolekce BO Skript [nepersistentní položka]
   * @return rows
  **/
  @ApiModelProperty(example = "null", value = "Řádky; kolekce BO Skript [nepersistentní položka]")
  public List<Scriptpackagerow> getRows() {
    return rows;
  }

  public void setRows(List<Scriptpackagerow> rows) {
    this.rows = rows;
  }

  public Scriptpackage name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Název [persistentní položka]
   * @return name
  **/
  @ApiModelProperty(example = "null", value = "Název [persistentní položka]")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Scriptpackage description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Popis [persistentní položka]
   * @return description
  **/
  @ApiModelProperty(example = "null", value = "Popis [persistentní položka]")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public Scriptpackage compiled(Boolean compiled) {
    this.compiled = compiled;
    return this;
  }

   /**
   * Zkompilováno [persistentní položka]
   * @return compiled
  **/
  @ApiModelProperty(example = "null", value = "Zkompilováno [persistentní položka]")
  public Boolean getCompiled() {
    return compiled;
  }

  public void setCompiled(Boolean compiled) {
    this.compiled = compiled;
  }

  public Scriptpackage usageState(Integer usageState) {
    this.usageState = usageState;
    return this;
  }

   /**
   * Stav [persistentní položka]
   * @return usageState
  **/
  @ApiModelProperty(example = "null", value = "Stav [persistentní položka]")
  public Integer getUsageState() {
    return usageState;
  }

  public void setUsageState(Integer usageState) {
    this.usageState = usageState;
  }

  public Scriptpackage runOrder(Integer runOrder) {
    this.runOrder = runOrder;
    return this;
  }

   /**
   * Pořadí spouštění [persistentní položka]
   * @return runOrder
  **/
  @ApiModelProperty(example = "null", value = "Pořadí spouštění [persistentní položka]")
  public Integer getRunOrder() {
    return runOrder;
  }

  public void setRunOrder(Integer runOrder) {
    this.runOrder = runOrder;
  }

  public Scriptpackage withoutSources(Boolean withoutSources) {
    this.withoutSources = withoutSources;
    return this;
  }

   /**
   * Bez zdr.kódu
   * @return withoutSources
  **/
  @ApiModelProperty(example = "null", value = "Bez zdr.kódu")
  public Boolean getWithoutSources() {
    return withoutSources;
  }

  public void setWithoutSources(Boolean withoutSources) {
    this.withoutSources = withoutSources;
  }

  public Scriptpackage createdByID(String createdByID) {
    this.createdByID = createdByID;
    return this;
  }

   /**
   * Vytvořil; ID objektu Uživatel [persistentní položka]
   * @return createdByID
  **/
  @ApiModelProperty(example = "null", value = "Vytvořil; ID objektu Uživatel [persistentní položka]")
  public String getCreatedByID() {
    return createdByID;
  }

  public void setCreatedByID(String createdByID) {
    this.createdByID = createdByID;
  }

  public Scriptpackage correctedByID(String correctedByID) {
    this.correctedByID = correctedByID;
    return this;
  }

   /**
   * Opravil; ID objektu Uživatel [persistentní položka]
   * @return correctedByID
  **/
  @ApiModelProperty(example = "null", value = "Opravil; ID objektu Uživatel [persistentní položka]")
  public String getCorrectedByID() {
    return correctedByID;
  }

  public void setCorrectedByID(String correctedByID) {
    this.correctedByID = correctedByID;
  }

  public Scriptpackage note(String note) {
    this.note = note;
    return this;
  }

   /**
   * Poznámka [persistentní položka]
   * @return note
  **/
  @ApiModelProperty(example = "null", value = "Poznámka [persistentní položka]")
  public String getNote() {
    return note;
  }

  public void setNote(String note) {
    this.note = note;
  }

  public Scriptpackage hashPassword(String hashPassword) {
    this.hashPassword = hashPassword;
    return this;
  }

   /**
   * Heslo [persistentní položka]
   * @return hashPassword
  **/
  @ApiModelProperty(example = "null", value = "Heslo [persistentní položka]")
  public String getHashPassword() {
    return hashPassword;
  }

  public void setHashPassword(String hashPassword) {
    this.hashPassword = hashPassword;
  }

  public Scriptpackage cryptForExport(Boolean cryptForExport) {
    this.cryptForExport = cryptForExport;
    return this;
  }

   /**
   * Zakódovat při exportu [persistentní položka]
   * @return cryptForExport
  **/
  @ApiModelProperty(example = "null", value = "Zakódovat při exportu [persistentní položka]")
  public Boolean getCryptForExport() {
    return cryptForExport;
  }

  public void setCryptForExport(Boolean cryptForExport) {
    this.cryptForExport = cryptForExport;
  }

  public Scriptpackage compileOnSave(Boolean compileOnSave) {
    this.compileOnSave = compileOnSave;
    return this;
  }

   /**
   * Zkompilovat při uložení
   * @return compileOnSave
  **/
  @ApiModelProperty(example = "null", value = "Zkompilovat při uložení")
  public Boolean getCompileOnSave() {
    return compileOnSave;
  }

  public void setCompileOnSave(Boolean compileOnSave) {
    this.compileOnSave = compileOnSave;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Scriptpackage scriptpackage = (Scriptpackage) o;
    return Objects.equals(this.displayName, scriptpackage.displayName) &&
        Objects.equals(this.ID, scriptpackage.ID) &&
        Objects.equals(this.classID, scriptpackage.classID) &&
        Objects.equals(this.objVersion, scriptpackage.objVersion) &&
        Objects.equals(this.rows, scriptpackage.rows) &&
        Objects.equals(this.name, scriptpackage.name) &&
        Objects.equals(this.description, scriptpackage.description) &&
        Objects.equals(this.compiled, scriptpackage.compiled) &&
        Objects.equals(this.usageState, scriptpackage.usageState) &&
        Objects.equals(this.runOrder, scriptpackage.runOrder) &&
        Objects.equals(this.withoutSources, scriptpackage.withoutSources) &&
        Objects.equals(this.createdByID, scriptpackage.createdByID) &&
        Objects.equals(this.correctedByID, scriptpackage.correctedByID) &&
        Objects.equals(this.note, scriptpackage.note) &&
        Objects.equals(this.hashPassword, scriptpackage.hashPassword) &&
        Objects.equals(this.cryptForExport, scriptpackage.cryptForExport) &&
        Objects.equals(this.compileOnSave, scriptpackage.compileOnSave);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayName, ID, classID, objVersion, rows, name, description, compiled, usageState, runOrder, withoutSources, createdByID, correctedByID, note, hashPassword, cryptForExport, compileOnSave);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Scriptpackage {\n");
    
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
    sb.append("    classID: ").append(toIndentedString(classID)).append("\n");
    sb.append("    objVersion: ").append(toIndentedString(objVersion)).append("\n");
    sb.append("    rows: ").append(toIndentedString(rows)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    compiled: ").append(toIndentedString(compiled)).append("\n");
    sb.append("    usageState: ").append(toIndentedString(usageState)).append("\n");
    sb.append("    runOrder: ").append(toIndentedString(runOrder)).append("\n");
    sb.append("    withoutSources: ").append(toIndentedString(withoutSources)).append("\n");
    sb.append("    createdByID: ").append(toIndentedString(createdByID)).append("\n");
    sb.append("    correctedByID: ").append(toIndentedString(correctedByID)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    hashPassword: ").append(toIndentedString(hashPassword)).append("\n");
    sb.append("    cryptForExport: ").append(toIndentedString(cryptForExport)).append("\n");
    sb.append("    compileOnSave: ").append(toIndentedString(compileOnSave)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

