/**
 * ABRA Gen Web API (spojení testapi)
 * Webové API systému 17.03.03
 *
 * OpenAPI spec version: 17.03.03
 * Contact: abragen@abra.eu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package application.service.abra.client.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;

import java.util.Objects;


/**
 * Logstorepositiondemand
 */
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2017-03-26T20:30:15.152+02:00")
public class Logstorepositiondemand   {
  @SerializedName("DisplayName")
  private String displayName = null;

  @SerializedName("ID")
  private String ID = null;

  @SerializedName("ClassID")
  private String classID = null;

  @SerializedName("ObjVersion")
  private Integer objVersion = null;

  @SerializedName("Parent_ID")
  private String parentID = null;

  @SerializedName("StoreCard_ID")
  private String storeCardID = null;

  @SerializedName("QUnit")
  private String qUnit = null;

  @SerializedName("UnitRate")
  private Double unitRate = null;

  @SerializedName("Quantity")
  private Double quantity = null;

  @SerializedName("BasicSpace")
  private Double basicSpace = null;

  @SerializedName("BasicWeight")
  private Double basicWeight = null;

  @SerializedName("MaxQuantity")
  private Integer maxQuantity = null;

  @SerializedName("UnitQuantity")
  private Double unitQuantity = null;

   /**
   * Název
   * @return displayName
  **/
  @ApiModelProperty(example = "null", value = "Název")
  public String getDisplayName() {
    return displayName;
  }

   /**
   * Vlastní ID [persistentní položka]
   * @return ID
  **/
  @ApiModelProperty(example = "null", value = "Vlastní ID [persistentní položka]")
  public String getID() {
    return ID;
  }

   /**
   * ID třídy
   * @return classID
  **/
  @ApiModelProperty(example = "null", value = "ID třídy")
  public String getClassID() {
    return classID;
  }

   /**
   * Verze objektu [persistentní položka]
   * @return objVersion
  **/
  @ApiModelProperty(example = "null", value = "Verze objektu [persistentní položka]")
  public Integer getObjVersion() {
    return objVersion;
  }

   /**
   * Vlastník; ID objektu Skladová pozice [persistentní položka]
   * @return parentID
  **/
  @ApiModelProperty(example = "null", value = "Vlastník; ID objektu Skladová pozice [persistentní položka]")
  public String getParentID() {
    return parentID;
  }

  public Logstorepositiondemand storeCardID(String storeCardID) {
    this.storeCardID = storeCardID;
    return this;
  }

   /**
   * Skladová karta; ID objektu Skladová karta [persistentní položka]
   * @return storeCardID
  **/
  @ApiModelProperty(example = "null", value = "Skladová karta; ID objektu Skladová karta [persistentní položka]")
  public String getStoreCardID() {
    return storeCardID;
  }

  public void setStoreCardID(String storeCardID) {
    this.storeCardID = storeCardID;
  }

  public Logstorepositiondemand qUnit(String qUnit) {
    this.qUnit = qUnit;
    return this;
  }

   /**
   * Jednotka [persistentní položka]
   * @return qUnit
  **/
  @ApiModelProperty(example = "null", value = "Jednotka [persistentní položka]")
  public String getQUnit() {
    return qUnit;
  }

  public void setQUnit(String qUnit) {
    this.qUnit = qUnit;
  }

  public Logstorepositiondemand unitRate(Double unitRate) {
    this.unitRate = unitRate;
    return this;
  }

   /**
   * Převodní vztah jedn. [persistentní položka]
   * @return unitRate
  **/
  @ApiModelProperty(example = "null", value = "Převodní vztah jedn. [persistentní položka]")
  public Double getUnitRate() {
    return unitRate;
  }

  public void setUnitRate(Double unitRate) {
    this.unitRate = unitRate;
  }

  public Logstorepositiondemand quantity(Double quantity) {
    this.quantity = quantity;
    return this;
  }

   /**
   * Množství [persistentní položka]
   * @return quantity
  **/
  @ApiModelProperty(example = "null", value = "Množství [persistentní položka]")
  public Double getQuantity() {
    return quantity;
  }

  public void setQuantity(Double quantity) {
    this.quantity = quantity;
  }

   /**
   * Objem přednost. naskl.
   * @return basicSpace
  **/
  @ApiModelProperty(example = "null", value = "Objem přednost. naskl.")
  public Double getBasicSpace() {
    return basicSpace;
  }

   /**
   * Hmotnost přednost. naskl.
   * @return basicWeight
  **/
  @ApiModelProperty(example = "null", value = "Hmotnost přednost. naskl.")
  public Double getBasicWeight() {
    return basicWeight;
  }

   /**
   * Možné maximum
   * @return maxQuantity
  **/
  @ApiModelProperty(example = "null", value = "Možné maximum")
  public Integer getMaxQuantity() {
    return maxQuantity;
  }

  public Logstorepositiondemand unitQuantity(Double unitQuantity) {
    this.unitQuantity = unitQuantity;
    return this;
  }

   /**
   * Množství v ev. jedn.
   * @return unitQuantity
  **/
  @ApiModelProperty(example = "null", value = "Množství v ev. jedn.")
  public Double getUnitQuantity() {
    return unitQuantity;
  }

  public void setUnitQuantity(Double unitQuantity) {
    this.unitQuantity = unitQuantity;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Logstorepositiondemand logstorepositiondemand = (Logstorepositiondemand) o;
    return Objects.equals(this.displayName, logstorepositiondemand.displayName) &&
        Objects.equals(this.ID, logstorepositiondemand.ID) &&
        Objects.equals(this.classID, logstorepositiondemand.classID) &&
        Objects.equals(this.objVersion, logstorepositiondemand.objVersion) &&
        Objects.equals(this.parentID, logstorepositiondemand.parentID) &&
        Objects.equals(this.storeCardID, logstorepositiondemand.storeCardID) &&
        Objects.equals(this.qUnit, logstorepositiondemand.qUnit) &&
        Objects.equals(this.unitRate, logstorepositiondemand.unitRate) &&
        Objects.equals(this.quantity, logstorepositiondemand.quantity) &&
        Objects.equals(this.basicSpace, logstorepositiondemand.basicSpace) &&
        Objects.equals(this.basicWeight, logstorepositiondemand.basicWeight) &&
        Objects.equals(this.maxQuantity, logstorepositiondemand.maxQuantity) &&
        Objects.equals(this.unitQuantity, logstorepositiondemand.unitQuantity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayName, ID, classID, objVersion, parentID, storeCardID, qUnit, unitRate, quantity, basicSpace, basicWeight, maxQuantity, unitQuantity);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Logstorepositiondemand {\n");
    
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
    sb.append("    classID: ").append(toIndentedString(classID)).append("\n");
    sb.append("    objVersion: ").append(toIndentedString(objVersion)).append("\n");
    sb.append("    parentID: ").append(toIndentedString(parentID)).append("\n");
    sb.append("    storeCardID: ").append(toIndentedString(storeCardID)).append("\n");
    sb.append("    qUnit: ").append(toIndentedString(qUnit)).append("\n");
    sb.append("    unitRate: ").append(toIndentedString(unitRate)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    basicSpace: ").append(toIndentedString(basicSpace)).append("\n");
    sb.append("    basicWeight: ").append(toIndentedString(basicWeight)).append("\n");
    sb.append("    maxQuantity: ").append(toIndentedString(maxQuantity)).append("\n");
    sb.append("    unitQuantity: ").append(toIndentedString(unitQuantity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

