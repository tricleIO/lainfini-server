/**
 * abra gen web api (spojení testapi)
 * webové api systému 17.03.03
 *
 * OpenAPI spec version: 17.03.03
 * Contact: abragen@abra.eu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package application.service.abra.client.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;


/**
 * Annualclearingrow
 */
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2017-03-29T11:52:08.096+02:00")
public class Annualclearingrow   {
  @SerializedName("displayname")
  private String displayname = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("classid")
  private String classid = null;

  @SerializedName("objversion")
  private Integer objversion = null;

  @SerializedName("parent_id")
  private String parentId = null;

  @SerializedName("calccharts")
  private List<Annualclearingchart> calccharts = new ArrayList<Annualclearingchart>();

  @SerializedName("rowtype")
  private Integer rowtype = null;

  @SerializedName("wageperiodfrom_id")
  private String wageperiodfromId = null;

  @SerializedName("wageperiodto_id")
  private String wageperiodtoId = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("comments")
  private String comments = null;

  @SerializedName("totalincome")
  private Double totalincome = null;

  @SerializedName("totalinsurance")
  private Double totalinsurance = null;

  @SerializedName("totalcountoffs")
  private Double totalcountoffs = null;

  @SerializedName("taxbase")
  private Double taxbase = null;

  @SerializedName("paidtax")
  private Double paidtax = null;

  @SerializedName("specialtaxbase")
  private Double specialtaxbase = null;

  @SerializedName("specialtax")
  private Double specialtax = null;

  @SerializedName("totalsickbenefit")
  private Double totalsickbenefit = null;

  @SerializedName("totaltaxbonus")
  private Double totaltaxbonus = null;

  @SerializedName("totaltaxadvantage")
  private Double totaltaxadvantage = null;

  @SerializedName("totaltaxdiscount")
  private Double totaltaxdiscount = null;

  @SerializedName("employeepremium")
  private Double employeepremium = null;

  @SerializedName("healthinsurance")
  private Double healthinsurance = null;

  @SerializedName("socialinsurance")
  private Double socialinsurance = null;

  @SerializedName("agreementincome")
  private Double agreementincome = null;

  @SerializedName("annualclearingcountoffs")
  private List<Annualclearingcountoff> annualclearingcountoffs = new ArrayList<Annualclearingcountoff>();

  @SerializedName("rowtypeastext")
  private String rowtypeastext = null;

  @SerializedName("oapenssavingbasecut")
  private Double oapenssavingbasecut = null;

  public Annualclearingrow displayname(String displayname) {
    this.displayname = displayname;
    return this;
  }

   /**
   * název
   * @return displayname
  **/
  @ApiModelProperty(example = "null", value = "název")
  public String getDisplayname() {
    return displayname;
  }

  public void setDisplayname(String displayname) {
    this.displayname = displayname;
  }

  public Annualclearingrow id(String id) {
    this.id = id;
    return this;
  }

   /**
   * vlastní id [persistentní položka]
   * @return id
  **/
  @ApiModelProperty(example = "null", value = "vlastní id [persistentní položka]")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public Annualclearingrow classid(String classid) {
    this.classid = classid;
    return this;
  }

   /**
   * id třídy
   * @return classid
  **/
  @ApiModelProperty(example = "null", value = "id třídy")
  public String getClassid() {
    return classid;
  }

  public void setClassid(String classid) {
    this.classid = classid;
  }

  public Annualclearingrow objversion(Integer objversion) {
    this.objversion = objversion;
    return this;
  }

   /**
   * verze objektu [persistentní položka]
   * @return objversion
  **/
  @ApiModelProperty(example = "null", value = "verze objektu [persistentní položka]")
  public Integer getObjversion() {
    return objversion;
  }

  public void setObjversion(Integer objversion) {
    this.objversion = objversion;
  }

  public Annualclearingrow parentId(String parentId) {
    this.parentId = parentId;
    return this;
  }

   /**
   * vlastník; id objektu roční zúčtování [persistentní položka]
   * @return parentId
  **/
  @ApiModelProperty(example = "null", value = "vlastník; id objektu roční zúčtování [persistentní položka]")
  public String getParentId() {
    return parentId;
  }

  public void setParentId(String parentId) {
    this.parentId = parentId;
  }

  public Annualclearingrow calccharts(List<Annualclearingchart> calccharts) {
    this.calccharts = calccharts;
    return this;
  }

  public Annualclearingrow addCalcchartsItem(Annualclearingchart calcchartsItem) {
    this.calccharts.add(calcchartsItem);
    return this;
  }

   /**
   * výpočtová schémata; kolekce bo vzorec roč.zúčt. [nepersistentní položka]
   * @return calccharts
  **/
  @ApiModelProperty(example = "null", value = "výpočtová schémata; kolekce bo vzorec roč.zúčt. [nepersistentní položka]")
  public List<Annualclearingchart> getCalccharts() {
    return calccharts;
  }

  public void setCalccharts(List<Annualclearingchart> calccharts) {
    this.calccharts = calccharts;
  }

  public Annualclearingrow rowtype(Integer rowtype) {
    this.rowtype = rowtype;
    return this;
  }

   /**
   * typ [persistentní položka]
   * @return rowtype
  **/
  @ApiModelProperty(example = "null", value = "typ [persistentní položka]")
  public Integer getRowtype() {
    return rowtype;
  }

  public void setRowtype(Integer rowtype) {
    this.rowtype = rowtype;
  }

  public Annualclearingrow wageperiodfromId(String wageperiodfromId) {
    this.wageperiodfromId = wageperiodfromId;
    return this;
  }

   /**
   * období od; id objektu mzdové období [persistentní položka]
   * @return wageperiodfromId
  **/
  @ApiModelProperty(example = "null", value = "období od; id objektu mzdové období [persistentní položka]")
  public String getWageperiodfromId() {
    return wageperiodfromId;
  }

  public void setWageperiodfromId(String wageperiodfromId) {
    this.wageperiodfromId = wageperiodfromId;
  }

  public Annualclearingrow wageperiodtoId(String wageperiodtoId) {
    this.wageperiodtoId = wageperiodtoId;
    return this;
  }

   /**
   * období do; id objektu mzdové období [persistentní položka]
   * @return wageperiodtoId
  **/
  @ApiModelProperty(example = "null", value = "období do; id objektu mzdové období [persistentní položka]")
  public String getWageperiodtoId() {
    return wageperiodtoId;
  }

  public void setWageperiodtoId(String wageperiodtoId) {
    this.wageperiodtoId = wageperiodtoId;
  }

  public Annualclearingrow description(String description) {
    this.description = description;
    return this;
  }

   /**
   * popis [persistentní položka]
   * @return description
  **/
  @ApiModelProperty(example = "null", value = "popis [persistentní položka]")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public Annualclearingrow comments(String comments) {
    this.comments = comments;
    return this;
  }

   /**
   * poznámka [persistentní položka]
   * @return comments
  **/
  @ApiModelProperty(example = "null", value = "poznámka [persistentní položka]")
  public String getComments() {
    return comments;
  }

  public void setComments(String comments) {
    this.comments = comments;
  }

  public Annualclearingrow totalincome(Double totalincome) {
    this.totalincome = totalincome;
    return this;
  }

   /**
   * celk.příjem [persistentní položka]
   * @return totalincome
  **/
  @ApiModelProperty(example = "null", value = "celk.příjem [persistentní položka]")
  public Double getTotalincome() {
    return totalincome;
  }

  public void setTotalincome(Double totalincome) {
    this.totalincome = totalincome;
  }

  public Annualclearingrow totalinsurance(Double totalinsurance) {
    this.totalinsurance = totalinsurance;
    return this;
  }

   /**
   * celk.pojistné [persistentní položka]
   * @return totalinsurance
  **/
  @ApiModelProperty(example = "null", value = "celk.pojistné [persistentní položka]")
  public Double getTotalinsurance() {
    return totalinsurance;
  }

  public void setTotalinsurance(Double totalinsurance) {
    this.totalinsurance = totalinsurance;
  }

  public Annualclearingrow totalcountoffs(Double totalcountoffs) {
    this.totalcountoffs = totalcountoffs;
    return this;
  }

   /**
   * celk.odpočty [persistentní položka]
   * @return totalcountoffs
  **/
  @ApiModelProperty(example = "null", value = "celk.odpočty [persistentní položka]")
  public Double getTotalcountoffs() {
    return totalcountoffs;
  }

  public void setTotalcountoffs(Double totalcountoffs) {
    this.totalcountoffs = totalcountoffs;
  }

  public Annualclearingrow taxbase(Double taxbase) {
    this.taxbase = taxbase;
    return this;
  }

   /**
   * základ [persistentní položka]
   * @return taxbase
  **/
  @ApiModelProperty(example = "null", value = "základ [persistentní položka]")
  public Double getTaxbase() {
    return taxbase;
  }

  public void setTaxbase(Double taxbase) {
    this.taxbase = taxbase;
  }

  public Annualclearingrow paidtax(Double paidtax) {
    this.paidtax = paidtax;
    return this;
  }

   /**
   * zaplac.daň [persistentní položka]
   * @return paidtax
  **/
  @ApiModelProperty(example = "null", value = "zaplac.daň [persistentní položka]")
  public Double getPaidtax() {
    return paidtax;
  }

  public void setPaidtax(Double paidtax) {
    this.paidtax = paidtax;
  }

  public Annualclearingrow specialtaxbase(Double specialtaxbase) {
    this.specialtaxbase = specialtaxbase;
    return this;
  }

   /**
   * základ srážk.d. [persistentní položka]
   * @return specialtaxbase
  **/
  @ApiModelProperty(example = "null", value = "základ srážk.d. [persistentní položka]")
  public Double getSpecialtaxbase() {
    return specialtaxbase;
  }

  public void setSpecialtaxbase(Double specialtaxbase) {
    this.specialtaxbase = specialtaxbase;
  }

  public Annualclearingrow specialtax(Double specialtax) {
    this.specialtax = specialtax;
    return this;
  }

   /**
   * srážk.daň [persistentní položka]
   * @return specialtax
  **/
  @ApiModelProperty(example = "null", value = "srážk.daň [persistentní položka]")
  public Double getSpecialtax() {
    return specialtax;
  }

  public void setSpecialtax(Double specialtax) {
    this.specialtax = specialtax;
  }

  public Annualclearingrow totalsickbenefit(Double totalsickbenefit) {
    this.totalsickbenefit = totalsickbenefit;
    return this;
  }

   /**
   * celk.nemocenská [persistentní položka]
   * @return totalsickbenefit
  **/
  @ApiModelProperty(example = "null", value = "celk.nemocenská [persistentní položka]")
  public Double getTotalsickbenefit() {
    return totalsickbenefit;
  }

  public void setTotalsickbenefit(Double totalsickbenefit) {
    this.totalsickbenefit = totalsickbenefit;
  }

  public Annualclearingrow totaltaxbonus(Double totaltaxbonus) {
    this.totaltaxbonus = totaltaxbonus;
    return this;
  }

   /**
   * daňový bonus [persistentní položka]
   * @return totaltaxbonus
  **/
  @ApiModelProperty(example = "null", value = "daňový bonus [persistentní položka]")
  public Double getTotaltaxbonus() {
    return totaltaxbonus;
  }

  public void setTotaltaxbonus(Double totaltaxbonus) {
    this.totaltaxbonus = totaltaxbonus;
  }

  public Annualclearingrow totaltaxadvantage(Double totaltaxadvantage) {
    this.totaltaxadvantage = totaltaxadvantage;
    return this;
  }

   /**
   * daňové zvýhodnění [persistentní položka]
   * @return totaltaxadvantage
  **/
  @ApiModelProperty(example = "null", value = "daňové zvýhodnění [persistentní položka]")
  public Double getTotaltaxadvantage() {
    return totaltaxadvantage;
  }

  public void setTotaltaxadvantage(Double totaltaxadvantage) {
    this.totaltaxadvantage = totaltaxadvantage;
  }

  public Annualclearingrow totaltaxdiscount(Double totaltaxdiscount) {
    this.totaltaxdiscount = totaltaxdiscount;
    return this;
  }

   /**
   * sleva na dani [persistentní položka]
   * @return totaltaxdiscount
  **/
  @ApiModelProperty(example = "null", value = "sleva na dani [persistentní položka]")
  public Double getTotaltaxdiscount() {
    return totaltaxdiscount;
  }

  public void setTotaltaxdiscount(Double totaltaxdiscount) {
    this.totaltaxdiscount = totaltaxdiscount;
  }

  public Annualclearingrow employeepremium(Double employeepremium) {
    this.employeepremium = employeepremium;
    return this;
  }

   /**
   * zaměstnanecká prémie [persistentní položka]
   * @return employeepremium
  **/
  @ApiModelProperty(example = "null", value = "zaměstnanecká prémie [persistentní položka]")
  public Double getEmployeepremium() {
    return employeepremium;
  }

  public void setEmployeepremium(Double employeepremium) {
    this.employeepremium = employeepremium;
  }

  public Annualclearingrow healthinsurance(Double healthinsurance) {
    this.healthinsurance = healthinsurance;
    return this;
  }

   /**
   * zdravotní poj. [persistentní položka]
   * @return healthinsurance
  **/
  @ApiModelProperty(example = "null", value = "zdravotní poj. [persistentní položka]")
  public Double getHealthinsurance() {
    return healthinsurance;
  }

  public void setHealthinsurance(Double healthinsurance) {
    this.healthinsurance = healthinsurance;
  }

  public Annualclearingrow socialinsurance(Double socialinsurance) {
    this.socialinsurance = socialinsurance;
    return this;
  }

   /**
   * sociální poj. [persistentní položka]
   * @return socialinsurance
  **/
  @ApiModelProperty(example = "null", value = "sociální poj. [persistentní položka]")
  public Double getSocialinsurance() {
    return socialinsurance;
  }

  public void setSocialinsurance(Double socialinsurance) {
    this.socialinsurance = socialinsurance;
  }

  public Annualclearingrow agreementincome(Double agreementincome) {
    this.agreementincome = agreementincome;
    return this;
  }

   /**
   * příjmy z dohod [persistentní položka]
   * @return agreementincome
  **/
  @ApiModelProperty(example = "null", value = "příjmy z dohod [persistentní položka]")
  public Double getAgreementincome() {
    return agreementincome;
  }

  public void setAgreementincome(Double agreementincome) {
    this.agreementincome = agreementincome;
  }

  public Annualclearingrow annualclearingcountoffs(List<Annualclearingcountoff> annualclearingcountoffs) {
    this.annualclearingcountoffs = annualclearingcountoffs;
    return this;
  }

  public Annualclearingrow addAnnualclearingcountoffsItem(Annualclearingcountoff annualclearingcountoffsItem) {
    this.annualclearingcountoffs.add(annualclearingcountoffsItem);
    return this;
  }

   /**
   * kolekce odpočtů; kolekce bo odpočet k roč.zúčtování [nepersistentní položka]
   * @return annualclearingcountoffs
  **/
  @ApiModelProperty(example = "null", value = "kolekce odpočtů; kolekce bo odpočet k roč.zúčtování [nepersistentní položka]")
  public List<Annualclearingcountoff> getAnnualclearingcountoffs() {
    return annualclearingcountoffs;
  }

  public void setAnnualclearingcountoffs(List<Annualclearingcountoff> annualclearingcountoffs) {
    this.annualclearingcountoffs = annualclearingcountoffs;
  }

  public Annualclearingrow rowtypeastext(String rowtypeastext) {
    this.rowtypeastext = rowtypeastext;
    return this;
  }

   /**
   * typ řádku
   * @return rowtypeastext
  **/
  @ApiModelProperty(example = "null", value = "typ řádku")
  public String getRowtypeastext() {
    return rowtypeastext;
  }

  public void setRowtypeastext(String rowtypeastext) {
    this.rowtypeastext = rowtypeastext;
  }

  public Annualclearingrow oapenssavingbasecut(Double oapenssavingbasecut) {
    this.oapenssavingbasecut = oapenssavingbasecut;
    return this;
  }

   /**
   * sds uplatněné do základu daně [persistentní položka]
   * @return oapenssavingbasecut
  **/
  @ApiModelProperty(example = "null", value = "sds uplatněné do základu daně [persistentní položka]")
  public Double getOapenssavingbasecut() {
    return oapenssavingbasecut;
  }

  public void setOapenssavingbasecut(Double oapenssavingbasecut) {
    this.oapenssavingbasecut = oapenssavingbasecut;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Annualclearingrow annualclearingrow = (Annualclearingrow) o;
    return Objects.equals(this.displayname, annualclearingrow.displayname) &&
        Objects.equals(this.id, annualclearingrow.id) &&
        Objects.equals(this.classid, annualclearingrow.classid) &&
        Objects.equals(this.objversion, annualclearingrow.objversion) &&
        Objects.equals(this.parentId, annualclearingrow.parentId) &&
        Objects.equals(this.calccharts, annualclearingrow.calccharts) &&
        Objects.equals(this.rowtype, annualclearingrow.rowtype) &&
        Objects.equals(this.wageperiodfromId, annualclearingrow.wageperiodfromId) &&
        Objects.equals(this.wageperiodtoId, annualclearingrow.wageperiodtoId) &&
        Objects.equals(this.description, annualclearingrow.description) &&
        Objects.equals(this.comments, annualclearingrow.comments) &&
        Objects.equals(this.totalincome, annualclearingrow.totalincome) &&
        Objects.equals(this.totalinsurance, annualclearingrow.totalinsurance) &&
        Objects.equals(this.totalcountoffs, annualclearingrow.totalcountoffs) &&
        Objects.equals(this.taxbase, annualclearingrow.taxbase) &&
        Objects.equals(this.paidtax, annualclearingrow.paidtax) &&
        Objects.equals(this.specialtaxbase, annualclearingrow.specialtaxbase) &&
        Objects.equals(this.specialtax, annualclearingrow.specialtax) &&
        Objects.equals(this.totalsickbenefit, annualclearingrow.totalsickbenefit) &&
        Objects.equals(this.totaltaxbonus, annualclearingrow.totaltaxbonus) &&
        Objects.equals(this.totaltaxadvantage, annualclearingrow.totaltaxadvantage) &&
        Objects.equals(this.totaltaxdiscount, annualclearingrow.totaltaxdiscount) &&
        Objects.equals(this.employeepremium, annualclearingrow.employeepremium) &&
        Objects.equals(this.healthinsurance, annualclearingrow.healthinsurance) &&
        Objects.equals(this.socialinsurance, annualclearingrow.socialinsurance) &&
        Objects.equals(this.agreementincome, annualclearingrow.agreementincome) &&
        Objects.equals(this.annualclearingcountoffs, annualclearingrow.annualclearingcountoffs) &&
        Objects.equals(this.rowtypeastext, annualclearingrow.rowtypeastext) &&
        Objects.equals(this.oapenssavingbasecut, annualclearingrow.oapenssavingbasecut);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayname, id, classid, objversion, parentId, calccharts, rowtype, wageperiodfromId, wageperiodtoId, description, comments, totalincome, totalinsurance, totalcountoffs, taxbase, paidtax, specialtaxbase, specialtax, totalsickbenefit, totaltaxbonus, totaltaxadvantage, totaltaxdiscount, employeepremium, healthinsurance, socialinsurance, agreementincome, annualclearingcountoffs, rowtypeastext, oapenssavingbasecut);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Annualclearingrow {\n");
    
    sb.append("    displayname: ").append(toIndentedString(displayname)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    classid: ").append(toIndentedString(classid)).append("\n");
    sb.append("    objversion: ").append(toIndentedString(objversion)).append("\n");
    sb.append("    parentId: ").append(toIndentedString(parentId)).append("\n");
    sb.append("    calccharts: ").append(toIndentedString(calccharts)).append("\n");
    sb.append("    rowtype: ").append(toIndentedString(rowtype)).append("\n");
    sb.append("    wageperiodfromId: ").append(toIndentedString(wageperiodfromId)).append("\n");
    sb.append("    wageperiodtoId: ").append(toIndentedString(wageperiodtoId)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    totalincome: ").append(toIndentedString(totalincome)).append("\n");
    sb.append("    totalinsurance: ").append(toIndentedString(totalinsurance)).append("\n");
    sb.append("    totalcountoffs: ").append(toIndentedString(totalcountoffs)).append("\n");
    sb.append("    taxbase: ").append(toIndentedString(taxbase)).append("\n");
    sb.append("    paidtax: ").append(toIndentedString(paidtax)).append("\n");
    sb.append("    specialtaxbase: ").append(toIndentedString(specialtaxbase)).append("\n");
    sb.append("    specialtax: ").append(toIndentedString(specialtax)).append("\n");
    sb.append("    totalsickbenefit: ").append(toIndentedString(totalsickbenefit)).append("\n");
    sb.append("    totaltaxbonus: ").append(toIndentedString(totaltaxbonus)).append("\n");
    sb.append("    totaltaxadvantage: ").append(toIndentedString(totaltaxadvantage)).append("\n");
    sb.append("    totaltaxdiscount: ").append(toIndentedString(totaltaxdiscount)).append("\n");
    sb.append("    employeepremium: ").append(toIndentedString(employeepremium)).append("\n");
    sb.append("    healthinsurance: ").append(toIndentedString(healthinsurance)).append("\n");
    sb.append("    socialinsurance: ").append(toIndentedString(socialinsurance)).append("\n");
    sb.append("    agreementincome: ").append(toIndentedString(agreementincome)).append("\n");
    sb.append("    annualclearingcountoffs: ").append(toIndentedString(annualclearingcountoffs)).append("\n");
    sb.append("    rowtypeastext: ").append(toIndentedString(rowtypeastext)).append("\n");
    sb.append("    oapenssavingbasecut: ").append(toIndentedString(oapenssavingbasecut)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

