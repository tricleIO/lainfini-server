/**
 * ABRA Gen Web API (spojení testapi)
 * Webové API systému 17.03.03
 *
 * OpenAPI spec version: 17.03.03
 * Contact: abragen@abra.eu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package application.service.abra.client.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;


/**
 * Annualclearingrow
 */
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2017-03-26T20:30:15.152+02:00")
public class Annualclearingrow   {
  @SerializedName("DisplayName")
  private String displayName = null;

  @SerializedName("ID")
  private String ID = null;

  @SerializedName("ClassID")
  private String classID = null;

  @SerializedName("ObjVersion")
  private Integer objVersion = null;

  @SerializedName("Parent_ID")
  private String parentID = null;

  @SerializedName("CalcCharts")
  private List<Annualclearingchart> calcCharts = new ArrayList<Annualclearingchart>();

  @SerializedName("RowType")
  private Integer rowType = null;

  @SerializedName("WagePeriodFrom_ID")
  private String wagePeriodFromID = null;

  @SerializedName("WagePeriodTo_ID")
  private String wagePeriodToID = null;

  @SerializedName("Description")
  private String description = null;

  @SerializedName("Comments")
  private String comments = null;

  @SerializedName("TotalIncome")
  private Double totalIncome = null;

  @SerializedName("TotalInsurance")
  private Double totalInsurance = null;

  @SerializedName("TotalCountOffs")
  private Double totalCountOffs = null;

  @SerializedName("TaxBase")
  private Double taxBase = null;

  @SerializedName("PaidTax")
  private Double paidTax = null;

  @SerializedName("SpecialTaxBase")
  private Double specialTaxBase = null;

  @SerializedName("SpecialTax")
  private Double specialTax = null;

  @SerializedName("TotalSickBenefit")
  private Double totalSickBenefit = null;

  @SerializedName("TotalTaxBonus")
  private Double totalTaxBonus = null;

  @SerializedName("TotalTaxAdvantage")
  private Double totalTaxAdvantage = null;

  @SerializedName("TotalTaxDiscount")
  private Double totalTaxDiscount = null;

  @SerializedName("EmployeePremium")
  private Double employeePremium = null;

  @SerializedName("HealthInsurance")
  private Double healthInsurance = null;

  @SerializedName("SocialInsurance")
  private Double socialInsurance = null;

  @SerializedName("AgreementIncome")
  private Double agreementIncome = null;

  @SerializedName("AnnualClearingCountOffs")
  private List<Annualclearingcountoff> annualClearingCountOffs = new ArrayList<Annualclearingcountoff>();

  @SerializedName("RowTypeAsText")
  private String rowTypeAsText = null;

  @SerializedName("OAPensSavingBaseCut")
  private Double oAPensSavingBaseCut = null;

   /**
   * Název
   * @return displayName
  **/
  @ApiModelProperty(example = "null", value = "Název")
  public String getDisplayName() {
    return displayName;
  }

   /**
   * Vlastní ID [persistentní položka]
   * @return ID
  **/
  @ApiModelProperty(example = "null", value = "Vlastní ID [persistentní položka]")
  public String getID() {
    return ID;
  }

   /**
   * ID třídy
   * @return classID
  **/
  @ApiModelProperty(example = "null", value = "ID třídy")
  public String getClassID() {
    return classID;
  }

   /**
   * Verze objektu [persistentní položka]
   * @return objVersion
  **/
  @ApiModelProperty(example = "null", value = "Verze objektu [persistentní položka]")
  public Integer getObjVersion() {
    return objVersion;
  }

   /**
   * Vlastník; ID objektu Roční zúčtování [persistentní položka]
   * @return parentID
  **/
  @ApiModelProperty(example = "null", value = "Vlastník; ID objektu Roční zúčtování [persistentní položka]")
  public String getParentID() {
    return parentID;
  }

  public Annualclearingrow calcCharts(List<Annualclearingchart> calcCharts) {
    this.calcCharts = calcCharts;
    return this;
  }

  public Annualclearingrow addCalcChartsItem(Annualclearingchart calcChartsItem) {
    this.calcCharts.add(calcChartsItem);
    return this;
  }

   /**
   * Výpočtová schémata; kolekce BO Vzorec roč.zúčt. [nepersistentní položka]
   * @return calcCharts
  **/
  @ApiModelProperty(example = "null", value = "Výpočtová schémata; kolekce BO Vzorec roč.zúčt. [nepersistentní položka]")
  public List<Annualclearingchart> getCalcCharts() {
    return calcCharts;
  }

  public void setCalcCharts(List<Annualclearingchart> calcCharts) {
    this.calcCharts = calcCharts;
  }

  public Annualclearingrow rowType(Integer rowType) {
    this.rowType = rowType;
    return this;
  }

   /**
   * Typ [persistentní položka]
   * @return rowType
  **/
  @ApiModelProperty(example = "null", value = "Typ [persistentní položka]")
  public Integer getRowType() {
    return rowType;
  }

  public void setRowType(Integer rowType) {
    this.rowType = rowType;
  }

  public Annualclearingrow wagePeriodFromID(String wagePeriodFromID) {
    this.wagePeriodFromID = wagePeriodFromID;
    return this;
  }

   /**
   * Období od; ID objektu Mzdové období [persistentní položka]
   * @return wagePeriodFromID
  **/
  @ApiModelProperty(example = "null", value = "Období od; ID objektu Mzdové období [persistentní položka]")
  public String getWagePeriodFromID() {
    return wagePeriodFromID;
  }

  public void setWagePeriodFromID(String wagePeriodFromID) {
    this.wagePeriodFromID = wagePeriodFromID;
  }

  public Annualclearingrow wagePeriodToID(String wagePeriodToID) {
    this.wagePeriodToID = wagePeriodToID;
    return this;
  }

   /**
   * Období do; ID objektu Mzdové období [persistentní položka]
   * @return wagePeriodToID
  **/
  @ApiModelProperty(example = "null", value = "Období do; ID objektu Mzdové období [persistentní položka]")
  public String getWagePeriodToID() {
    return wagePeriodToID;
  }

  public void setWagePeriodToID(String wagePeriodToID) {
    this.wagePeriodToID = wagePeriodToID;
  }

  public Annualclearingrow description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Popis [persistentní položka]
   * @return description
  **/
  @ApiModelProperty(example = "null", value = "Popis [persistentní položka]")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public Annualclearingrow comments(String comments) {
    this.comments = comments;
    return this;
  }

   /**
   * Poznámka [persistentní položka]
   * @return comments
  **/
  @ApiModelProperty(example = "null", value = "Poznámka [persistentní položka]")
  public String getComments() {
    return comments;
  }

  public void setComments(String comments) {
    this.comments = comments;
  }

  public Annualclearingrow totalIncome(Double totalIncome) {
    this.totalIncome = totalIncome;
    return this;
  }

   /**
   * Celk.příjem [persistentní položka]
   * @return totalIncome
  **/
  @ApiModelProperty(example = "null", value = "Celk.příjem [persistentní položka]")
  public Double getTotalIncome() {
    return totalIncome;
  }

  public void setTotalIncome(Double totalIncome) {
    this.totalIncome = totalIncome;
  }

  public Annualclearingrow totalInsurance(Double totalInsurance) {
    this.totalInsurance = totalInsurance;
    return this;
  }

   /**
   * Celk.pojistné [persistentní položka]
   * @return totalInsurance
  **/
  @ApiModelProperty(example = "null", value = "Celk.pojistné [persistentní položka]")
  public Double getTotalInsurance() {
    return totalInsurance;
  }

  public void setTotalInsurance(Double totalInsurance) {
    this.totalInsurance = totalInsurance;
  }

  public Annualclearingrow totalCountOffs(Double totalCountOffs) {
    this.totalCountOffs = totalCountOffs;
    return this;
  }

   /**
   * Celk.odpočty [persistentní položka]
   * @return totalCountOffs
  **/
  @ApiModelProperty(example = "null", value = "Celk.odpočty [persistentní položka]")
  public Double getTotalCountOffs() {
    return totalCountOffs;
  }

  public void setTotalCountOffs(Double totalCountOffs) {
    this.totalCountOffs = totalCountOffs;
  }

  public Annualclearingrow taxBase(Double taxBase) {
    this.taxBase = taxBase;
    return this;
  }

   /**
   * Základ [persistentní položka]
   * @return taxBase
  **/
  @ApiModelProperty(example = "null", value = "Základ [persistentní položka]")
  public Double getTaxBase() {
    return taxBase;
  }

  public void setTaxBase(Double taxBase) {
    this.taxBase = taxBase;
  }

  public Annualclearingrow paidTax(Double paidTax) {
    this.paidTax = paidTax;
    return this;
  }

   /**
   * Zaplac.daň [persistentní položka]
   * @return paidTax
  **/
  @ApiModelProperty(example = "null", value = "Zaplac.daň [persistentní položka]")
  public Double getPaidTax() {
    return paidTax;
  }

  public void setPaidTax(Double paidTax) {
    this.paidTax = paidTax;
  }

  public Annualclearingrow specialTaxBase(Double specialTaxBase) {
    this.specialTaxBase = specialTaxBase;
    return this;
  }

   /**
   * Základ srážk.d. [persistentní položka]
   * @return specialTaxBase
  **/
  @ApiModelProperty(example = "null", value = "Základ srážk.d. [persistentní položka]")
  public Double getSpecialTaxBase() {
    return specialTaxBase;
  }

  public void setSpecialTaxBase(Double specialTaxBase) {
    this.specialTaxBase = specialTaxBase;
  }

  public Annualclearingrow specialTax(Double specialTax) {
    this.specialTax = specialTax;
    return this;
  }

   /**
   * Srážk.daň [persistentní položka]
   * @return specialTax
  **/
  @ApiModelProperty(example = "null", value = "Srážk.daň [persistentní položka]")
  public Double getSpecialTax() {
    return specialTax;
  }

  public void setSpecialTax(Double specialTax) {
    this.specialTax = specialTax;
  }

  public Annualclearingrow totalSickBenefit(Double totalSickBenefit) {
    this.totalSickBenefit = totalSickBenefit;
    return this;
  }

   /**
   * Celk.nemocenská [persistentní položka]
   * @return totalSickBenefit
  **/
  @ApiModelProperty(example = "null", value = "Celk.nemocenská [persistentní položka]")
  public Double getTotalSickBenefit() {
    return totalSickBenefit;
  }

  public void setTotalSickBenefit(Double totalSickBenefit) {
    this.totalSickBenefit = totalSickBenefit;
  }

  public Annualclearingrow totalTaxBonus(Double totalTaxBonus) {
    this.totalTaxBonus = totalTaxBonus;
    return this;
  }

   /**
   * Daňový bonus [persistentní položka]
   * @return totalTaxBonus
  **/
  @ApiModelProperty(example = "null", value = "Daňový bonus [persistentní položka]")
  public Double getTotalTaxBonus() {
    return totalTaxBonus;
  }

  public void setTotalTaxBonus(Double totalTaxBonus) {
    this.totalTaxBonus = totalTaxBonus;
  }

  public Annualclearingrow totalTaxAdvantage(Double totalTaxAdvantage) {
    this.totalTaxAdvantage = totalTaxAdvantage;
    return this;
  }

   /**
   * Daňové zvýhodnění [persistentní položka]
   * @return totalTaxAdvantage
  **/
  @ApiModelProperty(example = "null", value = "Daňové zvýhodnění [persistentní položka]")
  public Double getTotalTaxAdvantage() {
    return totalTaxAdvantage;
  }

  public void setTotalTaxAdvantage(Double totalTaxAdvantage) {
    this.totalTaxAdvantage = totalTaxAdvantage;
  }

  public Annualclearingrow totalTaxDiscount(Double totalTaxDiscount) {
    this.totalTaxDiscount = totalTaxDiscount;
    return this;
  }

   /**
   * Sleva na dani [persistentní položka]
   * @return totalTaxDiscount
  **/
  @ApiModelProperty(example = "null", value = "Sleva na dani [persistentní položka]")
  public Double getTotalTaxDiscount() {
    return totalTaxDiscount;
  }

  public void setTotalTaxDiscount(Double totalTaxDiscount) {
    this.totalTaxDiscount = totalTaxDiscount;
  }

  public Annualclearingrow employeePremium(Double employeePremium) {
    this.employeePremium = employeePremium;
    return this;
  }

   /**
   * Zaměstnanecká prémie [persistentní položka]
   * @return employeePremium
  **/
  @ApiModelProperty(example = "null", value = "Zaměstnanecká prémie [persistentní položka]")
  public Double getEmployeePremium() {
    return employeePremium;
  }

  public void setEmployeePremium(Double employeePremium) {
    this.employeePremium = employeePremium;
  }

  public Annualclearingrow healthInsurance(Double healthInsurance) {
    this.healthInsurance = healthInsurance;
    return this;
  }

   /**
   * Zdravotní poj. [persistentní položka]
   * @return healthInsurance
  **/
  @ApiModelProperty(example = "null", value = "Zdravotní poj. [persistentní položka]")
  public Double getHealthInsurance() {
    return healthInsurance;
  }

  public void setHealthInsurance(Double healthInsurance) {
    this.healthInsurance = healthInsurance;
  }

  public Annualclearingrow socialInsurance(Double socialInsurance) {
    this.socialInsurance = socialInsurance;
    return this;
  }

   /**
   * Sociální poj. [persistentní položka]
   * @return socialInsurance
  **/
  @ApiModelProperty(example = "null", value = "Sociální poj. [persistentní položka]")
  public Double getSocialInsurance() {
    return socialInsurance;
  }

  public void setSocialInsurance(Double socialInsurance) {
    this.socialInsurance = socialInsurance;
  }

  public Annualclearingrow agreementIncome(Double agreementIncome) {
    this.agreementIncome = agreementIncome;
    return this;
  }

   /**
   * Příjmy z dohod [persistentní položka]
   * @return agreementIncome
  **/
  @ApiModelProperty(example = "null", value = "Příjmy z dohod [persistentní položka]")
  public Double getAgreementIncome() {
    return agreementIncome;
  }

  public void setAgreementIncome(Double agreementIncome) {
    this.agreementIncome = agreementIncome;
  }

  public Annualclearingrow annualClearingCountOffs(List<Annualclearingcountoff> annualClearingCountOffs) {
    this.annualClearingCountOffs = annualClearingCountOffs;
    return this;
  }

  public Annualclearingrow addAnnualClearingCountOffsItem(Annualclearingcountoff annualClearingCountOffsItem) {
    this.annualClearingCountOffs.add(annualClearingCountOffsItem);
    return this;
  }

   /**
   * Kolekce odpočtů; kolekce BO Odpočet k roč.zúčtování [nepersistentní položka]
   * @return annualClearingCountOffs
  **/
  @ApiModelProperty(example = "null", value = "Kolekce odpočtů; kolekce BO Odpočet k roč.zúčtování [nepersistentní položka]")
  public List<Annualclearingcountoff> getAnnualClearingCountOffs() {
    return annualClearingCountOffs;
  }

  public void setAnnualClearingCountOffs(List<Annualclearingcountoff> annualClearingCountOffs) {
    this.annualClearingCountOffs = annualClearingCountOffs;
  }

  public Annualclearingrow rowTypeAsText(String rowTypeAsText) {
    this.rowTypeAsText = rowTypeAsText;
    return this;
  }

   /**
   * Typ řádku
   * @return rowTypeAsText
  **/
  @ApiModelProperty(example = "null", value = "Typ řádku")
  public String getRowTypeAsText() {
    return rowTypeAsText;
  }

  public void setRowTypeAsText(String rowTypeAsText) {
    this.rowTypeAsText = rowTypeAsText;
  }

  public Annualclearingrow oAPensSavingBaseCut(Double oAPensSavingBaseCut) {
    this.oAPensSavingBaseCut = oAPensSavingBaseCut;
    return this;
  }

   /**
   * SDS uplatněné do základu daně [persistentní položka]
   * @return oAPensSavingBaseCut
  **/
  @ApiModelProperty(example = "null", value = "SDS uplatněné do základu daně [persistentní položka]")
  public Double getOAPensSavingBaseCut() {
    return oAPensSavingBaseCut;
  }

  public void setOAPensSavingBaseCut(Double oAPensSavingBaseCut) {
    this.oAPensSavingBaseCut = oAPensSavingBaseCut;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Annualclearingrow annualclearingrow = (Annualclearingrow) o;
    return Objects.equals(this.displayName, annualclearingrow.displayName) &&
        Objects.equals(this.ID, annualclearingrow.ID) &&
        Objects.equals(this.classID, annualclearingrow.classID) &&
        Objects.equals(this.objVersion, annualclearingrow.objVersion) &&
        Objects.equals(this.parentID, annualclearingrow.parentID) &&
        Objects.equals(this.calcCharts, annualclearingrow.calcCharts) &&
        Objects.equals(this.rowType, annualclearingrow.rowType) &&
        Objects.equals(this.wagePeriodFromID, annualclearingrow.wagePeriodFromID) &&
        Objects.equals(this.wagePeriodToID, annualclearingrow.wagePeriodToID) &&
        Objects.equals(this.description, annualclearingrow.description) &&
        Objects.equals(this.comments, annualclearingrow.comments) &&
        Objects.equals(this.totalIncome, annualclearingrow.totalIncome) &&
        Objects.equals(this.totalInsurance, annualclearingrow.totalInsurance) &&
        Objects.equals(this.totalCountOffs, annualclearingrow.totalCountOffs) &&
        Objects.equals(this.taxBase, annualclearingrow.taxBase) &&
        Objects.equals(this.paidTax, annualclearingrow.paidTax) &&
        Objects.equals(this.specialTaxBase, annualclearingrow.specialTaxBase) &&
        Objects.equals(this.specialTax, annualclearingrow.specialTax) &&
        Objects.equals(this.totalSickBenefit, annualclearingrow.totalSickBenefit) &&
        Objects.equals(this.totalTaxBonus, annualclearingrow.totalTaxBonus) &&
        Objects.equals(this.totalTaxAdvantage, annualclearingrow.totalTaxAdvantage) &&
        Objects.equals(this.totalTaxDiscount, annualclearingrow.totalTaxDiscount) &&
        Objects.equals(this.employeePremium, annualclearingrow.employeePremium) &&
        Objects.equals(this.healthInsurance, annualclearingrow.healthInsurance) &&
        Objects.equals(this.socialInsurance, annualclearingrow.socialInsurance) &&
        Objects.equals(this.agreementIncome, annualclearingrow.agreementIncome) &&
        Objects.equals(this.annualClearingCountOffs, annualclearingrow.annualClearingCountOffs) &&
        Objects.equals(this.rowTypeAsText, annualclearingrow.rowTypeAsText) &&
        Objects.equals(this.oAPensSavingBaseCut, annualclearingrow.oAPensSavingBaseCut);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayName, ID, classID, objVersion, parentID, calcCharts, rowType, wagePeriodFromID, wagePeriodToID, description, comments, totalIncome, totalInsurance, totalCountOffs, taxBase, paidTax, specialTaxBase, specialTax, totalSickBenefit, totalTaxBonus, totalTaxAdvantage, totalTaxDiscount, employeePremium, healthInsurance, socialInsurance, agreementIncome, annualClearingCountOffs, rowTypeAsText, oAPensSavingBaseCut);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Annualclearingrow {\n");
    
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
    sb.append("    classID: ").append(toIndentedString(classID)).append("\n");
    sb.append("    objVersion: ").append(toIndentedString(objVersion)).append("\n");
    sb.append("    parentID: ").append(toIndentedString(parentID)).append("\n");
    sb.append("    calcCharts: ").append(toIndentedString(calcCharts)).append("\n");
    sb.append("    rowType: ").append(toIndentedString(rowType)).append("\n");
    sb.append("    wagePeriodFromID: ").append(toIndentedString(wagePeriodFromID)).append("\n");
    sb.append("    wagePeriodToID: ").append(toIndentedString(wagePeriodToID)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    totalIncome: ").append(toIndentedString(totalIncome)).append("\n");
    sb.append("    totalInsurance: ").append(toIndentedString(totalInsurance)).append("\n");
    sb.append("    totalCountOffs: ").append(toIndentedString(totalCountOffs)).append("\n");
    sb.append("    taxBase: ").append(toIndentedString(taxBase)).append("\n");
    sb.append("    paidTax: ").append(toIndentedString(paidTax)).append("\n");
    sb.append("    specialTaxBase: ").append(toIndentedString(specialTaxBase)).append("\n");
    sb.append("    specialTax: ").append(toIndentedString(specialTax)).append("\n");
    sb.append("    totalSickBenefit: ").append(toIndentedString(totalSickBenefit)).append("\n");
    sb.append("    totalTaxBonus: ").append(toIndentedString(totalTaxBonus)).append("\n");
    sb.append("    totalTaxAdvantage: ").append(toIndentedString(totalTaxAdvantage)).append("\n");
    sb.append("    totalTaxDiscount: ").append(toIndentedString(totalTaxDiscount)).append("\n");
    sb.append("    employeePremium: ").append(toIndentedString(employeePremium)).append("\n");
    sb.append("    healthInsurance: ").append(toIndentedString(healthInsurance)).append("\n");
    sb.append("    socialInsurance: ").append(toIndentedString(socialInsurance)).append("\n");
    sb.append("    agreementIncome: ").append(toIndentedString(agreementIncome)).append("\n");
    sb.append("    annualClearingCountOffs: ").append(toIndentedString(annualClearingCountOffs)).append("\n");
    sb.append("    rowTypeAsText: ").append(toIndentedString(rowTypeAsText)).append("\n");
    sb.append("    oAPensSavingBaseCut: ").append(toIndentedString(oAPensSavingBaseCut)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

