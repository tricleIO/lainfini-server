/**
 * ABRA Gen Web API (spojení testapi)
 * Webové API systému 17.03.03
 *
 * OpenAPI spec version: 17.03.03
 * Contact: abragen@abra.eu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package application.service.abra.client.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;
import org.joda.time.DateTime;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;


/**
 * Fastsearchdefinition
 */
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2017-03-26T20:30:15.152+02:00")
public class Fastsearchdefinition   {
  @SerializedName("DisplayName")
  private String displayName = null;

  @SerializedName("ID")
  private String ID = null;

  @SerializedName("ClassID")
  private String classID = null;

  @SerializedName("ObjVersion")
  private Integer objVersion = null;

  @SerializedName("BOCLSID")
  private String BOCLSID = null;

  @SerializedName("TableName")
  private String tableName = null;

  @SerializedName("Indexes")
  private List<Fastsearchdefinitionindex> indexes = new ArrayList<Fastsearchdefinitionindex>();

  @SerializedName("DBTableName")
  private String dBTableName = null;

  @SerializedName("BOName")
  private String bOName = null;

  @SerializedName("SiteName")
  private String siteName = null;

  @SerializedName("CreatedAt$DATE")
  private DateTime createdAtDATE = null;

  @SerializedName("CorrectedAt$DATE")
  private DateTime correctedAtDATE = null;

  @SerializedName("CreatedBy_ID")
  private String createdByID = null;

  @SerializedName("CorrectedBy_ID")
  private String correctedByID = null;

   /**
   * Název
   * @return displayName
  **/
  @ApiModelProperty(example = "null", value = "Název")
  public String getDisplayName() {
    return displayName;
  }

   /**
   * Vlastní ID [persistentní položka]
   * @return ID
  **/
  @ApiModelProperty(example = "null", value = "Vlastní ID [persistentní položka]")
  public String getID() {
    return ID;
  }

   /**
   * ID třídy
   * @return classID
  **/
  @ApiModelProperty(example = "null", value = "ID třídy")
  public String getClassID() {
    return classID;
  }

   /**
   * Verze objektu [persistentní položka]
   * @return objVersion
  **/
  @ApiModelProperty(example = "null", value = "Verze objektu [persistentní položka]")
  public Integer getObjVersion() {
    return objVersion;
  }

  public Fastsearchdefinition BOCLSID(String BOCLSID) {
    this.BOCLSID = BOCLSID;
    return this;
  }

   /**
   * Třída [persistentní položka]
   * @return BOCLSID
  **/
  @ApiModelProperty(example = "null", value = "Třída [persistentní položka]")
  public String getBOCLSID() {
    return BOCLSID;
  }

  public void setBOCLSID(String BOCLSID) {
    this.BOCLSID = BOCLSID;
  }

  public Fastsearchdefinition tableName(String tableName) {
    this.tableName = tableName;
    return this;
  }

   /**
   * Tabulka [persistentní položka]
   * @return tableName
  **/
  @ApiModelProperty(example = "null", value = "Tabulka [persistentní položka]")
  public String getTableName() {
    return tableName;
  }

  public void setTableName(String tableName) {
    this.tableName = tableName;
  }

  public Fastsearchdefinition indexes(List<Fastsearchdefinitionindex> indexes) {
    this.indexes = indexes;
    return this;
  }

  public Fastsearchdefinition addIndexesItem(Fastsearchdefinitionindex indexesItem) {
    this.indexes.add(indexesItem);
    return this;
  }

   /**
   * Indexy; kolekce BO Fulltextové hledání - definice položky [nepersistentní položka]
   * @return indexes
  **/
  @ApiModelProperty(example = "null", value = "Indexy; kolekce BO Fulltextové hledání - definice položky [nepersistentní položka]")
  public List<Fastsearchdefinitionindex> getIndexes() {
    return indexes;
  }

  public void setIndexes(List<Fastsearchdefinitionindex> indexes) {
    this.indexes = indexes;
  }

  public Fastsearchdefinition dBTableName(String dBTableName) {
    this.dBTableName = dBTableName;
    return this;
  }

   /**
   * Db. tabulka
   * @return dBTableName
  **/
  @ApiModelProperty(example = "null", value = "Db. tabulka")
  public String getDBTableName() {
    return dBTableName;
  }

  public void setDBTableName(String dBTableName) {
    this.dBTableName = dBTableName;
  }

  public Fastsearchdefinition bOName(String bOName) {
    this.bOName = bOName;
    return this;
  }

   /**
   * Název třídy
   * @return bOName
  **/
  @ApiModelProperty(example = "null", value = "Název třídy")
  public String getBOName() {
    return bOName;
  }

  public void setBOName(String bOName) {
    this.bOName = bOName;
  }

  public Fastsearchdefinition siteName(String siteName) {
    this.siteName = siteName;
    return this;
  }

   /**
   * Název agendy
   * @return siteName
  **/
  @ApiModelProperty(example = "null", value = "Název agendy")
  public String getSiteName() {
    return siteName;
  }

  public void setSiteName(String siteName) {
    this.siteName = siteName;
  }

  public Fastsearchdefinition createdAtDATE(DateTime createdAtDATE) {
    this.createdAtDATE = createdAtDATE;
    return this;
  }

   /**
   * Vytvořeno [persistentní položka]
   * @return createdAtDATE
  **/
  @ApiModelProperty(example = "null", value = "Vytvořeno [persistentní položka]")
  public DateTime getCreatedAtDATE() {
    return createdAtDATE;
  }

  public void setCreatedAtDATE(DateTime createdAtDATE) {
    this.createdAtDATE = createdAtDATE;
  }

  public Fastsearchdefinition correctedAtDATE(DateTime correctedAtDATE) {
    this.correctedAtDATE = correctedAtDATE;
    return this;
  }

   /**
   * Opraveno [persistentní položka]
   * @return correctedAtDATE
  **/
  @ApiModelProperty(example = "null", value = "Opraveno [persistentní položka]")
  public DateTime getCorrectedAtDATE() {
    return correctedAtDATE;
  }

  public void setCorrectedAtDATE(DateTime correctedAtDATE) {
    this.correctedAtDATE = correctedAtDATE;
  }

  public Fastsearchdefinition createdByID(String createdByID) {
    this.createdByID = createdByID;
    return this;
  }

   /**
   * Vytvořil; ID objektu Uživatel [persistentní položka]
   * @return createdByID
  **/
  @ApiModelProperty(example = "null", value = "Vytvořil; ID objektu Uživatel [persistentní položka]")
  public String getCreatedByID() {
    return createdByID;
  }

  public void setCreatedByID(String createdByID) {
    this.createdByID = createdByID;
  }

  public Fastsearchdefinition correctedByID(String correctedByID) {
    this.correctedByID = correctedByID;
    return this;
  }

   /**
   * Opravil; ID objektu Uživatel [persistentní položka]
   * @return correctedByID
  **/
  @ApiModelProperty(example = "null", value = "Opravil; ID objektu Uživatel [persistentní položka]")
  public String getCorrectedByID() {
    return correctedByID;
  }

  public void setCorrectedByID(String correctedByID) {
    this.correctedByID = correctedByID;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Fastsearchdefinition fastsearchdefinition = (Fastsearchdefinition) o;
    return Objects.equals(this.displayName, fastsearchdefinition.displayName) &&
        Objects.equals(this.ID, fastsearchdefinition.ID) &&
        Objects.equals(this.classID, fastsearchdefinition.classID) &&
        Objects.equals(this.objVersion, fastsearchdefinition.objVersion) &&
        Objects.equals(this.BOCLSID, fastsearchdefinition.BOCLSID) &&
        Objects.equals(this.tableName, fastsearchdefinition.tableName) &&
        Objects.equals(this.indexes, fastsearchdefinition.indexes) &&
        Objects.equals(this.dBTableName, fastsearchdefinition.dBTableName) &&
        Objects.equals(this.bOName, fastsearchdefinition.bOName) &&
        Objects.equals(this.siteName, fastsearchdefinition.siteName) &&
        Objects.equals(this.createdAtDATE, fastsearchdefinition.createdAtDATE) &&
        Objects.equals(this.correctedAtDATE, fastsearchdefinition.correctedAtDATE) &&
        Objects.equals(this.createdByID, fastsearchdefinition.createdByID) &&
        Objects.equals(this.correctedByID, fastsearchdefinition.correctedByID);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayName, ID, classID, objVersion, BOCLSID, tableName, indexes, dBTableName, bOName, siteName, createdAtDATE, correctedAtDATE, createdByID, correctedByID);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Fastsearchdefinition {\n");
    
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
    sb.append("    classID: ").append(toIndentedString(classID)).append("\n");
    sb.append("    objVersion: ").append(toIndentedString(objVersion)).append("\n");
    sb.append("    BOCLSID: ").append(toIndentedString(BOCLSID)).append("\n");
    sb.append("    tableName: ").append(toIndentedString(tableName)).append("\n");
    sb.append("    indexes: ").append(toIndentedString(indexes)).append("\n");
    sb.append("    dBTableName: ").append(toIndentedString(dBTableName)).append("\n");
    sb.append("    bOName: ").append(toIndentedString(bOName)).append("\n");
    sb.append("    siteName: ").append(toIndentedString(siteName)).append("\n");
    sb.append("    createdAtDATE: ").append(toIndentedString(createdAtDATE)).append("\n");
    sb.append("    correctedAtDATE: ").append(toIndentedString(correctedAtDATE)).append("\n");
    sb.append("    createdByID: ").append(toIndentedString(createdByID)).append("\n");
    sb.append("    correctedByID: ").append(toIndentedString(correctedByID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

