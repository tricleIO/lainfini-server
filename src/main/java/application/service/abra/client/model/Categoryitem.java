/**
 * ABRA Gen Web API (spojení testapi)
 * Webové API systému 17.03.03
 *
 * OpenAPI spec version: 17.03.03
 * Contact: abragen@abra.eu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package application.service.abra.client.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;

import java.util.Objects;


/**
 * Categoryitem
 */
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2017-03-26T20:30:15.152+02:00")
public class Categoryitem   {
  @SerializedName("DisplayName")
  private String displayName = null;

  @SerializedName("ID")
  private String ID = null;

  @SerializedName("ClassID")
  private String classID = null;

  @SerializedName("ObjVersion")
  private Integer objVersion = null;

  @SerializedName("Hidden")
  private Boolean hidden = null;

  @SerializedName("Name")
  private String name = null;

  @SerializedName("ItemType")
  private Integer itemType = null;

  @SerializedName("UserFieldDef2_ID")
  private String userFieldDef2ID = null;

  @SerializedName("CategoryItemGroup_ID")
  private String categoryItemGroupID = null;

  @SerializedName("Expression")
  private String expression = null;

  @SerializedName("FieldName")
  private String fieldName = null;

  @SerializedName("FieldLabel")
  private String fieldLabel = null;

  @SerializedName("FieldHint")
  private String fieldHint = null;

  @SerializedName("ItemTypeTXT")
  private String itemTypeTXT = null;

  @SerializedName("DataTypeTXT")
  private String dataTypeTXT = null;

  @SerializedName("FieldCode")
  private Integer fieldCode = null;

  @SerializedName("SQLQuery")
  private String sQLQuery = null;

  @SerializedName("DataType")
  private Integer dataType = null;

  @SerializedName("DataSize")
  private Integer dataSize = null;

  @SerializedName("DecimalPlaces")
  private Integer decimalPlaces = null;

   /**
   * Název
   * @return displayName
  **/
  @ApiModelProperty(example = "null", value = "Název")
  public String getDisplayName() {
    return displayName;
  }

   /**
   * Vlastní ID [persistentní položka]
   * @return ID
  **/
  @ApiModelProperty(example = "null", value = "Vlastní ID [persistentní položka]")
  public String getID() {
    return ID;
  }

   /**
   * ID třídy
   * @return classID
  **/
  @ApiModelProperty(example = "null", value = "ID třídy")
  public String getClassID() {
    return classID;
  }

   /**
   * Verze objektu [persistentní položka]
   * @return objVersion
  **/
  @ApiModelProperty(example = "null", value = "Verze objektu [persistentní položka]")
  public Integer getObjVersion() {
    return objVersion;
  }

  public Categoryitem hidden(Boolean hidden) {
    this.hidden = hidden;
    return this;
  }

   /**
   * Skrytý [persistentní položka]
   * @return hidden
  **/
  @ApiModelProperty(example = "null", value = "Skrytý [persistentní položka]")
  public Boolean getHidden() {
    return hidden;
  }

  public void setHidden(Boolean hidden) {
    this.hidden = hidden;
  }

  public Categoryitem name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Název [persistentní položka]
   * @return name
  **/
  @ApiModelProperty(example = "null", value = "Název [persistentní položka]")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Categoryitem itemType(Integer itemType) {
    this.itemType = itemType;
    return this;
  }

   /**
   * Typ [persistentní položka]
   * @return itemType
  **/
  @ApiModelProperty(example = "null", value = "Typ [persistentní položka]")
  public Integer getItemType() {
    return itemType;
  }

  public void setItemType(Integer itemType) {
    this.itemType = itemType;
  }

  public Categoryitem userFieldDef2ID(String userFieldDef2ID) {
    this.userFieldDef2ID = userFieldDef2ID;
    return this;
  }

   /**
   * Uživatelská položka; ID objektu Definovatelná položka [persistentní položka]
   * @return userFieldDef2ID
  **/
  @ApiModelProperty(example = "null", value = "Uživatelská položka; ID objektu Definovatelná položka [persistentní položka]")
  public String getUserFieldDef2ID() {
    return userFieldDef2ID;
  }

  public void setUserFieldDef2ID(String userFieldDef2ID) {
    this.userFieldDef2ID = userFieldDef2ID;
  }

  public Categoryitem categoryItemGroupID(String categoryItemGroupID) {
    this.categoryItemGroupID = categoryItemGroupID;
    return this;
  }

   /**
   * Skupina; ID objektu Skupina kategorizačních údajů [persistentní položka]
   * @return categoryItemGroupID
  **/
  @ApiModelProperty(example = "null", value = "Skupina; ID objektu Skupina kategorizačních údajů [persistentní položka]")
  public String getCategoryItemGroupID() {
    return categoryItemGroupID;
  }

  public void setCategoryItemGroupID(String categoryItemGroupID) {
    this.categoryItemGroupID = categoryItemGroupID;
  }

  public Categoryitem expression(String expression) {
    this.expression = expression;
    return this;
  }

   /**
   * Výraz [persistentní položka]
   * @return expression
  **/
  @ApiModelProperty(example = "null", value = "Výraz [persistentní položka]")
  public String getExpression() {
    return expression;
  }

  public void setExpression(String expression) {
    this.expression = expression;
  }

  public Categoryitem fieldName(String fieldName) {
    this.fieldName = fieldName;
    return this;
  }

   /**
   * Jméno položky [persistentní položka]
   * @return fieldName
  **/
  @ApiModelProperty(example = "null", value = "Jméno položky [persistentní položka]")
  public String getFieldName() {
    return fieldName;
  }

  public void setFieldName(String fieldName) {
    this.fieldName = fieldName;
  }

  public Categoryitem fieldLabel(String fieldLabel) {
    this.fieldLabel = fieldLabel;
    return this;
  }

   /**
   * Popis položky
   * @return fieldLabel
  **/
  @ApiModelProperty(example = "null", value = "Popis položky")
  public String getFieldLabel() {
    return fieldLabel;
  }

  public void setFieldLabel(String fieldLabel) {
    this.fieldLabel = fieldLabel;
  }

  public Categoryitem fieldHint(String fieldHint) {
    this.fieldHint = fieldHint;
    return this;
  }

   /**
   * Popiska položky
   * @return fieldHint
  **/
  @ApiModelProperty(example = "null", value = "Popiska položky")
  public String getFieldHint() {
    return fieldHint;
  }

  public void setFieldHint(String fieldHint) {
    this.fieldHint = fieldHint;
  }

  public Categoryitem itemTypeTXT(String itemTypeTXT) {
    this.itemTypeTXT = itemTypeTXT;
    return this;
  }

   /**
   * Typ
   * @return itemTypeTXT
  **/
  @ApiModelProperty(example = "null", value = "Typ")
  public String getItemTypeTXT() {
    return itemTypeTXT;
  }

  public void setItemTypeTXT(String itemTypeTXT) {
    this.itemTypeTXT = itemTypeTXT;
  }

  public Categoryitem dataTypeTXT(String dataTypeTXT) {
    this.dataTypeTXT = dataTypeTXT;
    return this;
  }

   /**
   * Datový typ
   * @return dataTypeTXT
  **/
  @ApiModelProperty(example = "null", value = "Datový typ")
  public String getDataTypeTXT() {
    return dataTypeTXT;
  }

  public void setDataTypeTXT(String dataTypeTXT) {
    this.dataTypeTXT = dataTypeTXT;
  }

  public Categoryitem fieldCode(Integer fieldCode) {
    this.fieldCode = fieldCode;
    return this;
  }

   /**
   * Číslo položky
   * @return fieldCode
  **/
  @ApiModelProperty(example = "null", value = "Číslo položky")
  public Integer getFieldCode() {
    return fieldCode;
  }

  public void setFieldCode(Integer fieldCode) {
    this.fieldCode = fieldCode;
  }

  public Categoryitem sQLQuery(String sQLQuery) {
    this.sQLQuery = sQLQuery;
    return this;
  }

   /**
   * Definice [persistentní položka]
   * @return sQLQuery
  **/
  @ApiModelProperty(example = "null", value = "Definice [persistentní položka]")
  public String getSQLQuery() {
    return sQLQuery;
  }

  public void setSQLQuery(String sQLQuery) {
    this.sQLQuery = sQLQuery;
  }

  public Categoryitem dataType(Integer dataType) {
    this.dataType = dataType;
    return this;
  }

   /**
   * Datový typ [persistentní položka]
   * @return dataType
  **/
  @ApiModelProperty(example = "null", value = "Datový typ [persistentní položka]")
  public Integer getDataType() {
    return dataType;
  }

  public void setDataType(Integer dataType) {
    this.dataType = dataType;
  }

  public Categoryitem dataSize(Integer dataSize) {
    this.dataSize = dataSize;
    return this;
  }

   /**
   * Velikost [persistentní položka]
   * @return dataSize
  **/
  @ApiModelProperty(example = "null", value = "Velikost [persistentní položka]")
  public Integer getDataSize() {
    return dataSize;
  }

  public void setDataSize(Integer dataSize) {
    this.dataSize = dataSize;
  }

  public Categoryitem decimalPlaces(Integer decimalPlaces) {
    this.decimalPlaces = decimalPlaces;
    return this;
  }

   /**
   * Počet des.míst [persistentní položka]
   * @return decimalPlaces
  **/
  @ApiModelProperty(example = "null", value = "Počet des.míst [persistentní položka]")
  public Integer getDecimalPlaces() {
    return decimalPlaces;
  }

  public void setDecimalPlaces(Integer decimalPlaces) {
    this.decimalPlaces = decimalPlaces;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Categoryitem categoryitem = (Categoryitem) o;
    return Objects.equals(this.displayName, categoryitem.displayName) &&
        Objects.equals(this.ID, categoryitem.ID) &&
        Objects.equals(this.classID, categoryitem.classID) &&
        Objects.equals(this.objVersion, categoryitem.objVersion) &&
        Objects.equals(this.hidden, categoryitem.hidden) &&
        Objects.equals(this.name, categoryitem.name) &&
        Objects.equals(this.itemType, categoryitem.itemType) &&
        Objects.equals(this.userFieldDef2ID, categoryitem.userFieldDef2ID) &&
        Objects.equals(this.categoryItemGroupID, categoryitem.categoryItemGroupID) &&
        Objects.equals(this.expression, categoryitem.expression) &&
        Objects.equals(this.fieldName, categoryitem.fieldName) &&
        Objects.equals(this.fieldLabel, categoryitem.fieldLabel) &&
        Objects.equals(this.fieldHint, categoryitem.fieldHint) &&
        Objects.equals(this.itemTypeTXT, categoryitem.itemTypeTXT) &&
        Objects.equals(this.dataTypeTXT, categoryitem.dataTypeTXT) &&
        Objects.equals(this.fieldCode, categoryitem.fieldCode) &&
        Objects.equals(this.sQLQuery, categoryitem.sQLQuery) &&
        Objects.equals(this.dataType, categoryitem.dataType) &&
        Objects.equals(this.dataSize, categoryitem.dataSize) &&
        Objects.equals(this.decimalPlaces, categoryitem.decimalPlaces);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayName, ID, classID, objVersion, hidden, name, itemType, userFieldDef2ID, categoryItemGroupID, expression, fieldName, fieldLabel, fieldHint, itemTypeTXT, dataTypeTXT, fieldCode, sQLQuery, dataType, dataSize, decimalPlaces);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Categoryitem {\n");
    
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
    sb.append("    classID: ").append(toIndentedString(classID)).append("\n");
    sb.append("    objVersion: ").append(toIndentedString(objVersion)).append("\n");
    sb.append("    hidden: ").append(toIndentedString(hidden)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    itemType: ").append(toIndentedString(itemType)).append("\n");
    sb.append("    userFieldDef2ID: ").append(toIndentedString(userFieldDef2ID)).append("\n");
    sb.append("    categoryItemGroupID: ").append(toIndentedString(categoryItemGroupID)).append("\n");
    sb.append("    expression: ").append(toIndentedString(expression)).append("\n");
    sb.append("    fieldName: ").append(toIndentedString(fieldName)).append("\n");
    sb.append("    fieldLabel: ").append(toIndentedString(fieldLabel)).append("\n");
    sb.append("    fieldHint: ").append(toIndentedString(fieldHint)).append("\n");
    sb.append("    itemTypeTXT: ").append(toIndentedString(itemTypeTXT)).append("\n");
    sb.append("    dataTypeTXT: ").append(toIndentedString(dataTypeTXT)).append("\n");
    sb.append("    fieldCode: ").append(toIndentedString(fieldCode)).append("\n");
    sb.append("    sQLQuery: ").append(toIndentedString(sQLQuery)).append("\n");
    sb.append("    dataType: ").append(toIndentedString(dataType)).append("\n");
    sb.append("    dataSize: ").append(toIndentedString(dataSize)).append("\n");
    sb.append("    decimalPlaces: ").append(toIndentedString(decimalPlaces)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

